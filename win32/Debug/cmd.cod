; Listing generated by Microsoft (R) Optimizing Compiler Version 19.30.30705.0 

	TITLE	C:\Users\Beat\git_projekte\dtb\psi46test\win32\Debug\cmd.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG142210 DB	0aH, '+-- control commands ------------------------------'
	DB	'------------+', 0aH, '| h                  display this text '
	DB	'                        |', 0aH, '| exit               exit c'
	DB	'ommander                            |', 0aH, '+-- wafer test '
	DB	'------------------------------------------------+', 0aH, '| g'
	DB	'o                 start wafer test (press <cr> to stop)     |'
	DB	0aH, '| test               run chip test                      '
	DB	'       |', 0aH, '| pr <command>       send command to prober '
	DB	'                   |', 0aH, '| sep                prober z-ax'
	DB	'is separation                  |', 0aH, '| contact           '
	DB	' prober z-axis contact                     |', 0aH, '| first '
	DB	'             go to first die and clear wafer map       |', 0aH
	DB	'| next               go to next die                          '
	DB	'  |', 0aH, '| goto <x> <y>       go to specifed die          '
	DB	'              |', 0aH, '| chippos <ABCD>     move to chip A, '
	DB	'B, C or D                 |', 0aH, '+------------------------'
	DB	'--------------------------------------+', 0aH, 00H
$SG142211 DB	0aH, '+-- control commands ------------------------------'
	DB	'------------+', 0aH, '| h                  display this text '
	DB	'                        |', 0aH, '| exit               exit c'
	DB	'ommander                            |', 0aH, '+-- chip test -'
	DB	'------------------------------------------------+', 0aH, '| t'
	DB	'est <chip id>     run chip test                             |'
	DB	0aH, '+-------------------------------------------------------'
	DB	'-------+', 0aH, 00H
$SG142220 DB	'dtb', 00H
$SG142221 DB	'Get infos of all connected DTBs', 00H
$SG142222 DB	00H
$SG142228 DB	00H
$SG142231 DB	00H
$SG142234 DB	00H
$SG142223 DB	'scan', 00H
$SG142246 DB	00H
$SG142249 DB	00H
$SG142252 DB	00H
$SG142224 DB	'open a DTB (with name)', 00H
$SG142255 DB	00H
$SG142225 DB	'[<name>]', 00H
$SG142258 DB	00H
$SG142261 DB	00H
$SG142264 DB	00H
$SG142226 DB	'open', 00H
$SG142267 DB	00H
$SG142330 DB	00H
$SG142333 DB	00H
$SG142227 DB	'close DTB connection', 00H
$SG142336 DB	00H
$SG142339 DB	00H
$SG142354 DB	00H
$SG142229 DB	'close', 00H
$SG142357 DB	00H
$SG142360 DB	00H
$SG142230 DB	'link all DTB functions', 00H
$SG142363 DB	00H
$SG142232 DB	'rpclink', 00H
$SG142233 DB	'blink with LEDs', 00H
$SG142235 DB	'welcome', 00H
$SG142236 DB	'set atb LEDs', 00H
$SG142366 DB	00H
$SG142369 DB	00H
$SG142372 DB	00H
$SG142237 DB	'<mask>', 00H
$SG142375 DB	00H
$SG142238 DB	'setled', 00H
$SG142378 DB	00H
$SG142239 DB	'writes text to log file', 00H
$SG142240 DB	'<text>', 00H
$SG142381 DB	00H
$SG142241 DB	'log', 00H
$SG142242 DB	'upgrade DTB', 00H
$SG142243 DB	'<filename>', 00H
$SG142408 DB	00H
$SG142244 DB	'upgrade', 00H
$SG142245 DB	'list all DTB functions', 00H
$SG142411 DB	00H
$SG142247 DB	'rpcinfo', 00H
$SG142248 DB	'show detailed DTB info', 00H
$SG142414 DB	00H
$SG142250 DB	'info', 00H
$SG142467 DB	00H
$SG142470 DB	00H
$SG142482 DB	00H
$SG142251 DB	'shows DTB software version number', 00H
$SG142492 DB	00H
$SG142501 DB	00H
$SG142253 DB	'ver', 00H
$SG142254 DB	'shows DTB software version', 00H
$SG142516 DB	00H
$SG142256 DB	'version', 00H
$SG142257 DB	'get board id', 00H
$SG142519 DB	00H
$SG142530 DB	00H
$SG142531 DB	00H
$SG142259 DB	'boardid', 00H
$SG142260 DB	'inits the testboard', 00H
$SG142262 DB	'init', 00H
$SG142533 DB	00H
$SG142534 DB	00H
$SG142592 DB	00H
$SG142263 DB	'flushes usb buffer', 00H
$SG142595 DB	00H
$SG142265 DB	'flush', 00H
$SG142598 DB	00H
$SG142608 DB	00H
$SG142266 DB	'clears usb data buffer', 00H
$SG142611 DB	00H
$SG142268 DB	'clear', 00H
$SG142623 DB	00H
$SG142626 DB	00H
$SG142269 DB	'waits <us> microseconds', 00H
$SG142270 DB	'<us>', 00H
$SG142629 DB	00H
$SG142632 DB	00H
$SG142633 DB	00H
$SG142271 DB	'udelay', 00H
$SG142635 DB	00H
$SG142272 DB	'waits <ms> milliseconds', 00H
$SG142273 DB	'<ms>', 00H
$SG142636 DB	00H
$SG142638 DB	00H
$SG142639 DB	00H
$SG142274 DB	'mdelay', 00H
$SG142641 DB	00H
$SG142275 DB	'Select clock source (1=ext, 0=int)', 00H
$SG142642 DB	00H
$SG142276 DB	'<source>', 00H
$SG142644 DB	00H
$SG142645 DB	00H
$SG142651 DB	00H
$SG142277 DB	'clksrc', 00H
$SG142654 DB	00H
$SG142278 DB	'Check if ext clock is present', 00H
$SG142660 DB	00H
$SG142669 DB	00H
$SG142279 DB	'clkok', 00H
$SG142675 DB	00H
$SG142678 DB	00H
$SG142280 DB	'clkok', 00H
$SG142681 DB	00H
$SG142688 DB	00H
$SG142281 DB	'clock frequency select', 00H
$SG142715 DB	00H
$SG142282 DB	'<freqdiv>', 00H
$SG142721 DB	00H
$SG142724 DB	00H
$SG142283 DB	'fsel', 00H
$SG142727 DB	00H
$SG142730 DB	00H
$SG142733 DB	00H
$SG142284 DB	'stretch clock', 00H
$SG142736 DB	00H
	ORG $+1
$SG142285 DB	'<src> <delay> <width>', 00H
	ORG $+2
$SG142286 DB	'stretch', 00H
$SG142287 DB	'clk delay', 00H
	ORG $+2
$SG142288 DB	'<delay>', 00H
$SG142289 DB	'clk', 00H
$SG142290 DB	'sda delay', 00H
	ORG $+2
$SG142291 DB	'<delay>', 00H
$SG142292 DB	'sda', 00H
$SG142293 DB	'ctr delay', 00H
	ORG $+2
$SG142294 DB	'<delay>', 00H
$SG142295 DB	'ctr', 00H
$SG142296 DB	'tin delay', 00H
	ORG $+2
$SG142297 DB	'<delay>', 00H
$SG142298 DB	'tin', 00H
$SG142299 DB	'rda/tout delay', 00H
	ORG $+1
$SG142300 DB	'<delay>', 00H
$SG142301 DB	'rda', 00H
$SG142302 DB	'clk signal level', 00H
	ORG $+3
$SG142303 DB	'<level>', 00H
$SG142304 DB	'clklvl', 00H
	ORG $+1
$SG142305 DB	'sda signel level', 00H
	ORG $+3
$SG142306 DB	'<level>', 00H
$SG142307 DB	'sdalvl', 00H
	ORG $+1
$SG142308 DB	'ctr signel level', 00H
	ORG $+3
$SG142309 DB	'<level>', 00H
$SG142310 DB	'ctrlvl', 00H
	ORG $+1
$SG142311 DB	'tin signel level', 00H
	ORG $+3
$SG142312 DB	'<level>', 00H
$SG142313 DB	'tinlvl', 00H
	ORG $+1
$SG142314 DB	'clk mode', 00H
	ORG $+3
$SG142315 DB	'<mode>', 00H
	ORG $+1
$SG142316 DB	'clkmode', 00H
$SG142317 DB	'sda mode', 00H
	ORG $+3
$SG142318 DB	'<mode>', 00H
	ORG $+1
$SG142319 DB	'sdamode', 00H
$SG142320 DB	'ctr mode', 00H
	ORG $+3
$SG142321 DB	'<mode>', 00H
	ORG $+1
$SG142322 DB	'ctrmode', 00H
$SG142323 DB	'tin mode', 00H
	ORG $+3
$SG142324 DB	'<mode>', 00H
	ORG $+1
$SG142325 DB	'tinmode', 00H
$SG142326 DB	'output signal offset', 00H
	ORG $+3
$SG142327 DB	'<offset>', 00H
	ORG $+3
$SG142328 DB	'sigoffset', 00H
	ORG $+2
$SG142329 DB	'LVDS inputs', 00H
$SG142331 DB	'lvds', 00H
	ORG $+3
$SG142332 DB	'LCDS inputs', 00H
$SG142334 DB	'lcds', 00H
	ORG $+3
$SG142335 DB	'switch ROC power on', 00H
$SG142337 DB	'pon', 00H
$SG142338 DB	'switch ROC power off', 00H
	ORG $+3
$SG142340 DB	'poff', 00H
	ORG $+3
$SG142341 DB	'set VA in mV', 00H
	ORG $+3
$SG142342 DB	'<mV>', 00H
	ORG $+3
$SG142343 DB	'va', 00H
	ORG $+1
$SG142344 DB	'set VD in mV', 00H
	ORG $+3
$SG142345 DB	'<mV>', 00H
	ORG $+3
$SG142346 DB	'vd', 00H
	ORG $+1
$SG142347 DB	'set IA in mA', 00H
	ORG $+3
$SG142348 DB	'<mA>', 00H
	ORG $+3
$SG142349 DB	'ia', 00H
	ORG $+1
$SG142350 DB	'set ID in mA', 00H
	ORG $+3
$SG142351 DB	'<mA>', 00H
	ORG $+3
$SG142352 DB	'id', 00H
	ORG $+1
$SG142353 DB	'get VA in V', 00H
$SG142355 DB	'getva', 00H
	ORG $+2
$SG142356 DB	'get VD in V', 00H
$SG142358 DB	'getvd', 00H
	ORG $+2
$SG142359 DB	'get IA in mA', 00H
	ORG $+3
$SG142361 DB	'getia', 00H
	ORG $+2
$SG142362 DB	'get ID in mA', 00H
	ORG $+3
$SG142364 DB	'getid', 00H
	ORG $+2
$SG142365 DB	'switch HV on', 00H
	ORG $+3
$SG142367 DB	'hvon', 00H
	ORG $+3
$SG142368 DB	'switch HV off', 00H
	ORG $+2
$SG142370 DB	'hvoff', 00H
	ORG $+2
$SG142371 DB	'activate reset', 00H
	ORG $+1
$SG142373 DB	'reson', 00H
	ORG $+2
$SG142374 DB	'deactivate reset', 00H
	ORG $+3
$SG142376 DB	'resoff', 00H
	ORG $+1
$SG142377 DB	'shows testboard status', 00H
	ORG $+1
$SG142379 DB	'status', 00H
	ORG $+1
$SG142380 DB	'set ROC address', 00H
$SG142382 DB	'rocaddr', 00H
$SG142383 DB	'assign signal to D1 output', 00H
	ORG $+1
$SG142384 DB	'<signal>', 00H
	ORG $+3
$SG142385 DB	'd1', 00H
	ORG $+1
$SG142386 DB	'assign signal to D2 outout', 00H
	ORG $+1
$SG142387 DB	'<signal>', 00H
	ORG $+3
$SG142388 DB	'd2', 00H
	ORG $+1
$SG142389 DB	'assign deser signal to D1 output', 00H
	ORG $+3
$SG142390 DB	'<deser> <signal>', 00H
	ORG $+3
$SG142391 DB	'ds1', 00H
$SG142392 DB	'assign deser signal to D2 outout', 00H
	ORG $+3
$SG142393 DB	'<deser> <signal>', 00H
	ORG $+3
$SG142394 DB	'ds2', 00H
$SG142395 DB	'assign analog signal to A1 output', 00H
	ORG $+2
$SG142396 DB	'<signal>', 00H
	ORG $+3
$SG142397 DB	'a1', 00H
	ORG $+1
$SG142398 DB	'assign analog signal to A2 outout', 00H
	ORG $+2
$SG142399 DB	'<signal>', 00H
	ORG $+3
$SG142400 DB	'a2', 00H
	ORG $+1
$SG142401 DB	'assign analog signal to ADC', 00H
$SG142402 DB	'<signal>', 00H
	ORG $+3
$SG142403 DB	'probeadc', 00H
	ORG $+3
$SG142404 DB	'set pattern generator entry', 00H
$SG142405 DB	'<addr> <bits> <delay>', 00H
	ORG $+2
$SG142406 DB	'pgset', 00H
	ORG $+2
$SG142407 DB	'stops pattern generator', 00H
$SG142409 DB	'pgstop', 00H
	ORG $+1
$SG142410 DB	'send single pattern', 00H
$SG142412 DB	'pgsingle', 00H
	ORG $+3
$SG142413 DB	'enable external pattern trigger', 00H
$SG142415 DB	'pgtrig', 00H
	ORG $+1
$SG142416 DB	'start patterngenerator in loop mode', 00H
$SG142417 DB	'<period>', 00H
	ORG $+3
$SG142418 DB	'pgloop', 00H
	ORG $+1
$SG142419 DB	'trigger', 00H
$SG142420 DB	'Select trigger source', 00H
	ORG $+2
$SG142421 DB	'<bitmask>', 00H
	ORG $+2
$SG142422 DB	'trgsel', 00H
	ORG $+1
$SG142423 DB	'Set trigger delay in clock cycles', 00H
	ORG $+2
$SG142424 DB	'<delay>', 00H
$SG142425 DB	'trgdelay', 00H
	ORG $+3
$SG142426 DB	'Set max readout length', 00H
	ORG $+1
$SG142427 DB	'<timeout>', 00H
	ORG $+2
$SG142428 DB	'trgtimeout', 00H
	ORG $+1
$SG142429 DB	'Chose periodic trigger generator', 00H
	ORG $+3
$SG142430 DB	'<period>', 00H
	ORG $+3
$SG142431 DB	'trgper', 00H
	ORG $+1
$SG142432 DB	'Chose random trigger generator', 00H
	ORG $+1
$SG142433 DB	'<rate>', 00H
	ORG $+1
$SG142434 DB	'trgrand', 00H
$SG142435 DB	'Send single trigger signal', 00H
	ORG $+1
$SG142436 DB	'<bitmask>', 00H
	ORG $+2
$SG142437 DB	'trgsend', 00H
$SG142438 DB	'daq', 00H
$SG142439 DB	'Open DAQ and allocate memory', 00H
	ORG $+3
$SG142440 DB	'<buffer size> [<ch>]', 00H
	ORG $+3
$SG142441 DB	'dopen', 00H
	ORG $+2
$SG142442 DB	'Close DAQ', 00H
	ORG $+2
$SG142443 DB	'[<channel>]', 00H
$SG142444 DB	'dclose', 00H
	ORG $+1
$SG142445 DB	'Enable DAQ', 00H
	ORG $+1
$SG142446 DB	'[<channel>]', 00H
$SG142447 DB	'dstart', 00H
	ORG $+1
$SG142448 DB	'Disable DAQ', 00H
$SG142449 DB	'[<channel>]', 00H
$SG142450 DB	'dstop', 00H
	ORG $+2
$SG142451 DB	'Show DAQ buffer fill state', 00H
	ORG $+1
$SG142452 DB	'[<channel>]', 00H
$SG142453 DB	'dsize', 00H
	ORG $+2
$SG142454 DB	'Read Daq buffer and show as raw data', 00H
	ORG $+3
$SG142455 DB	'[<channel>]', 00H
$SG142456 DB	'dread', 00H
	ORG $+2
$SG142457 DB	'Read Daq buffer and show as ROC data', 00H
	ORG $+3
$SG142458 DB	'[<channel>]', 00H
$SG142459 DB	'dreadr', 00H
	ORG $+1
$SG142460 DB	'Read Daq buffer and show as module data', 00H
$SG142461 DB	'[<channel>]', 00H
$SG142462 DB	'dreadm', 00H
	ORG $+1
$SG142463 DB	'Read Daq buffer and show as raw data', 00H
	ORG $+3
$SG142464 DB	'[<channel>]', 00H
$SG142465 DB	'dreada', 00H
	ORG $+1
$SG142466 DB	'select deser400 for DAQ channel 0', 00H
	ORG $+2
$SG142468 DB	'dselmod', 00H
$SG142469 DB	'reset all deser400', 00H
	ORG $+1
$SG142471 DB	'dmodres', 00H
$SG142472 DB	'select deser160 for DAQ channel 0', 00H
	ORG $+2
$SG142473 DB	'<value>', 00H
$SG142474 DB	'dselroc', 00H
$SG142475 DB	'select adc for channel 0', 00H
	ORG $+3
$SG142476 DB	'<value>', 00H
$SG142477 DB	'dselroca', 00H
	ORG $+3
$SG142478 DB	'select data generator for channel 0', 00H
$SG142479 DB	'<startvalue>', 00H
	ORG $+3
$SG142480 DB	'dselsim', 00H
$SG142481 DB	'deselect all', 00H
	ORG $+3
$SG142483 DB	'dseloff', 00H
$SG142484 DB	'deser400', 00H
	ORG $+3
$SG142485 DB	'Enable deser 0..3', 00H
	ORG $+2
$SG142486 DB	'<deser>', 00H
$SG142487 DB	'dsena', 00H
	ORG $+2
$SG142488 DB	'Disable deser 0..3', 00H
	ORG $+1
$SG142489 DB	'<deser>', 00H
$SG142490 DB	'dsdis', 00H
	ORG $+2
$SG142491 DB	'Disable all deser', 00H
	ORG $+2
$SG142493 DB	'dsdisall', 00H
	ORG $+3
$SG142494 DB	'Switch deser in manual mode and set fixed phase', 00H
$SG142495 DB	'<deser> <phase>', 00H
$SG142496 DB	'dssetph', 00H
$SG142497 DB	'Switch deser in auto phase mode', 00H
$SG142498 DB	'<deser>', 00H
$SG142499 DB	'dsauto', 00H
	ORG $+1
$SG142500 DB	'Switch all deser in auto phase mode', 00H
$SG142502 DB	'dsautoall', 00H
	ORG $+2
$SG142503 DB	'Read deser xor sum', 00H
	ORG $+1
$SG142504 DB	'<deser>', 00H
$SG142505 DB	'dsgetxor', 00H
	ORG $+3
$SG142506 DB	'Read deser phase', 00H
	ORG $+3
$SG142507 DB	'<deser>', 00H
$SG142508 DB	'dsgetph', 00H
$SG142509 DB	'Switch gate in running mode', 00H
$SG142510 DB	'<width> <periode>', 00H
	ORG $+2
$SG142511 DB	'gaterun', 00H
$SG142512 DB	'Stop gate running mode and start single pulse', 00H
	ORG $+2
$SG142513 DB	'<width>', 00H
$SG142514 DB	'gatesingle', 00H
	ORG $+1
$SG142515 DB	'Stop gate running mode', 00H
	ORG $+1
$SG142517 DB	'gatestop', 00H
	ORG $+3
$SG142518 DB	'disable TBM', 00H
$SG142520 DB	'tbmdis', 00H
	ORG $+1
$SG142521 DB	'set hub and port address', 00H
	ORG $+3
$SG142522 DB	'<hub> <port>', 00H
	ORG $+3
$SG142523 DB	'tbmsel', 00H
	ORG $+1
$SG142524 DB	'set hub address for module', 00H
	ORG $+1
$SG142525 DB	'<hub>', 00H
	ORG $+2
$SG142526 DB	'modsel', 00H
	ORG $+1
$SG142527 DB	'set TBM register', 00H
	ORG $+3
$SG142528 DB	'<reg> <value>', 00H
	ORG $+2
$SG142529 DB	'tbmset', 00H
	ORG $+1
$SG142532 DB	'tbmget', 00H
	ORG $+1
$SG142535 DB	'tbmgetraw', 00H
	ORG $+2
$SG142536 DB	'roc', 00H
$SG142537 DB	'set i2c address', 00H
$SG142538 DB	'<addr range>', 00H
	ORG $+3
$SG142539 DB	'select', 00H
	ORG $+1
$SG142540 DB	'set DAC', 00H
$SG142541 DB	'<address> <value>', 00H
	ORG $+2
$SG142542 DB	'dac', 00H
$SG142543 DB	'set Vdig', 00H
	ORG $+3
$SG142544 DB	'<value>', 00H
$SG142545 DB	'vdig', 00H
	ORG $+3
$SG142546 DB	'set Vana', 00H
	ORG $+3
$SG142547 DB	'<value>', 00H
$SG142548 DB	'vana', 00H
	ORG $+3
$SG142549 DB	'set Vtrim', 00H
	ORG $+2
$SG142550 DB	'<value>', 00H
$SG142551 DB	'vtrim', 00H
	ORG $+2
$SG142552 DB	'set VthrComp', 00H
	ORG $+3
$SG142553 DB	'<value>', 00H
$SG142554 DB	'vthr', 00H
	ORG $+3
$SG142555 DB	'set Vcal', 00H
	ORG $+3
$SG142556 DB	'<value>', 00H
$SG142557 DB	'vcal', 00H
	ORG $+3
$SG142558 DB	'set cal delay', 00H
	ORG $+2
$SG142559 DB	'<value>', 00H
$SG142560 DB	'caldel', 00H
	ORG $+1
$SG142561 DB	'ADC reference', 00H
	ORG $+2
$SG142562 DB	'<value>', 00H
$SG142563 DB	'adcref', 00H
	ORG $+1
$SG142564 DB	'ADC offset', 00H
	ORG $+1
$SG142565 DB	'<value>', 00H
$SG142566 DB	'adcoffset', 00H
	ORG $+2
$SG142567 DB	'set WBC', 00H
$SG142568 DB	'<value>', 00H
$SG142569 DB	'wbc', 00H
$SG142570 DB	'set control register', 00H
	ORG $+3
$SG142571 DB	'<value>', 00H
$SG142572 DB	'ctl', 00H
$SG142573 DB	'enable column', 00H
	ORG $+2
$SG142574 DB	'<range>', 00H
$SG142575 DB	'cole', 00H
	ORG $+3
$SG142576 DB	'disable columns', 00H
$SG142577 DB	'<range>', 00H
$SG142578 DB	'cold', 00H
	ORG $+3
$SG142579 DB	'trim pixel', 00H
	ORG $+1
$SG142580 DB	'<range> <range> <value>', 00H
$SG142581 DB	'pixe', 00H
	ORG $+3
$SG142582 DB	'kill pixel', 00H
	ORG $+1
$SG142583 DB	'<range> <range>', 00H
$SG142584 DB	'pixd', 00H
	ORG $+3
$SG142585 DB	'calibrate pixel', 00H
$SG142586 DB	'<range> <range>', 00H
$SG142587 DB	'cal', 00H
$SG142588 DB	'sensor calibrate pixel', 00H
	ORG $+1
$SG142589 DB	'<range> <range>', 00H
$SG142590 DB	'cals', 00H
	ORG $+3
$SG142591 DB	'clear calibrate', 00H
$SG142593 DB	'cald', 00H
	ORG $+3
$SG142594 DB	'mask all pixel and cols', 00H
$SG142596 DB	'mask', 00H
	ORG $+3
$SG142597 DB	'Read RTD on the HDI', 00H
$SG142599 DB	'gettemp', 00H
$SG142600 DB	'test', 00H
	ORG $+3
$SG142601 DB	'choose ROC type for test', 00H
	ORG $+3
$SG142602 DB	'ana|dig', 00H
$SG142603 DB	'roctype', 00H
$SG142604 DB	'send command to prober', 00H
	ORG $+1
$SG142605 DB	'<command>', 00H
	ORG $+2
$SG142606 DB	'pr', 00H
	ORG $+1
$SG142607 DB	'prober z-axis separation', 00H
	ORG $+3
$SG142609 DB	'sep', 00H
$SG142610 DB	'prober z-axis contact', 00H
	ORG $+2
$SG142612 DB	'contact', 00H
$SG142613 DB	'run chip test', 00H
	ORG $+2
$SG142614 DB	'<chip id>', 00H
	ORG $+2
$SG142615 DB	'test', 00H
	ORG $+3
$SG142616 DB	'move to chip A, B, C or D', 00H
	ORG $+2
$SG142617 DB	'<ABCD>', 00H
	ORG $+1
$SG142618 DB	'chippos', 00H
$SG142619 DB	'start wafer test (press <cr> to stop)', 00H
	ORG $+2
$SG142620 DB	'init|cont', 00H
	ORG $+2
$SG142621 DB	'go', 00H
	ORG $+1
$SG142622 DB	'go to first die and clear wafer map', 00H
$SG142624 DB	'first', 00H
	ORG $+2
$SG142625 DB	'go to next die', 00H
	ORG $+1
$SG142627 DB	'next', 00H
	ORG $+3
$SG142628 DB	'go to specified die', 00H
$SG142630 DB	'goto', 00H
	ORG $+3
$SG142631 DB	'ext', 00H
$SG142634 DB	'showclk', 00H
$SG142637 DB	'showctr', 00H
$SG142640 DB	'showsda', 00H
$SG142643 DB	'decoding', 00H
	ORG $+3
$SG142646 DB	'showrocdata', 00H
$SG142647 DB	'send/receive a vector', 00H
	ORG $+2
$SG142648 DB	'<length>', 00H
	ORG $+3
$SG142649 DB	'vectortest', 00H
	ORG $+1
$SG142650 DB	'test DAQ read function', 00H
	ORG $+1
$SG142652 DB	'daqtest', 00H
$SG142653 DB	'test DAQ read function in continous mode', 00H
	ORG $+3
$SG142655 DB	'daqtest2', 00H
	ORG $+3
$SG142656 DB	'read data from module and list errors', 00H
	ORG $+2
$SG142657 DB	'<channel> <period>', 00H
	ORG $+1
$SG142658 DB	'daqerrorcheckm', 00H
	ORG $+1
$SG142659 DB	'xor for different gate length', 00H
	ORG $+2
$SG142661 DB	'desergatescan', 00H
	ORG $+2
$SG142663 DB	'<channel> <period>', 00H
	ORG $+1
$SG142662 DB	'read, decode and list continous data stream from module '
	DB	'with trig gen', 00H
	ORG $+2
$SG142664 DB	'daqreadm', 00H
	ORG $+3
$SG142666 DB	'<period>', 00H
	ORG $+3
$SG142665 DB	'read, decode and list continous data stream from roc wit'
	DB	'h trig gen', 00H
	ORG $+1
$SG142667 DB	'daqreadt', 00H
	ORG $+3
$SG142668 DB	'test analyzer chain', 00H
$SG142670 DB	'analyze', 00H
$SG142671 DB	'send <string> in a Ethernet packet', 00H
	ORG $+1
$SG142672 DB	'<string>', 00H
	ORG $+3
$SG142673 DB	'ethsend', 00H
$SG142674 DB	'shows number of received packets', 00H
	ORG $+3
$SG142676 DB	'ethrx', 00H
	ORG $+2
$SG142677 DB	'shmoo vx xrange vy ymin yrange', 00H
	ORG $+1
$SG142679 DB	'shmoo', 00H
	ORG $+2
$SG142680 DB	'align deser160', 00H
	ORG $+1
$SG142682 DB	'deser160', 00H
	ORG $+3
$SG142683 DB	'pulse height scan', 00H
	ORG $+2
$SG142684 DB	'<x> <y> <cal range>', 00H
$SG142685 DB	'phscan', 00H
	ORG $+1
$SG142686 DB	'droc600', 00H
$SG142687 DB	'address scan', 00H
	ORG $+3
$SG142689 DB	'scanaddr', 00H
	ORG $+3
$SG142690 DB	'scan pulse heigth', 00H
	ORG $+2
$SG142691 DB	'<range x> <range y> [<count>]', 00H
	ORG $+2
$SG142692 DB	'scanphxy', 00H
	ORG $+3
$SG142693 DB	'scan pulse heigth repeated', 00H
	ORG $+1
$SG142694 DB	'<count>', 00H
$SG142695 DB	'scanph', 00H
	ORG $+1
$SG142696 DB	'DB analog cell uniformity', 00H
	ORG $+2
$SG142697 DB	'<count>', 00H
$SG142698 DB	'dbmatch', 00H
$SG142699 DB	'DB analog cell uniformity (2nd methode)', 00H
$SG142700 DB	'<count>', 00H
$SG142701 DB	'dbmatch2', 00H
	ORG $+3
$SG142702 DB	'pulse height even odd effect', 00H
	ORG $+3
$SG142703 DB	'<x> <y>', 00H
$SG142704 DB	'evenodd', 00H
$SG142705 DB	'multiple readout', 00H
	ORG $+3
$SG142706 DB	'<n readouts>', 00H
	ORG $+3
$SG142707 DB	'multiread', 00H
	ORG $+2
$SG142708 DB	'cluster test', 00H
	ORG $+3
$SG142709 DB	'<n readouts>', 00H
	ORG $+3
$SG142710 DB	'cluster', 00H
$SG142711 DB	'cluster test', 00H
	ORG $+3
$SG142712 DB	'<n readouts>', 00H
	ORG $+3
$SG142713 DB	'cluster2', 00H
	ORG $+3
$SG142714 DB	'Data buffer test', 00H
	ORG $+3
$SG142716 DB	'db1', 00H
$SG142717 DB	'enables n pixels and calibrate', 00H
	ORG $+1
$SG142718 DB	'{<x> <y>}', 00H
	ORG $+2
$SG142719 DB	'enapx', 00H
	ORG $+2
$SG142720 DB	'DB test 0', 00H
	ORG $+2
$SG142722 DB	'rotest0', 00H
$SG142723 DB	'DB test 1', 00H
	ORG $+2
$SG142725 DB	'rotest1', 00H
$SG142726 DB	'DB test 2', 00H
	ORG $+2
$SG142728 DB	'rotest2', 00H
$SG142729 DB	'DB test 3', 00H
	ORG $+2
$SG142731 DB	'rotest3', 00H
$SG142732 DB	'Id vs Pixel Rate', 00H
	ORG $+3
$SG142734 DB	'idslope', 00H
$SG142735 DB	'simple help', 00H
$SG142737 DB	'h', 00H
	ORG $+2
$SG146089 DB	'invalid argument', 00H
	ORG $+3
$SG146090 DB	'%s', 00H
	ORG $+1
$SG146091 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.30.30705\include\xmemory', 00H
	ORG $+2
$SG146093 DB	00H, 00H
	ORG $+2
$SG146092 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '0', 00H, '.', 00H, '3', 00H, '0'
	DB	00H, '7', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG146094 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?cmd@@YAXXZ					; cmd
PUBLIC	?cmdHelp@@YAXXZ					; cmdHelp
PUBLIC	?cmd_h@@YAXAAVCCmdLine@@@Z			; cmd_h
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??_R0?AVCRpcError@@@8				; CRpcError `RTTI Type Descriptor'
EXTRN	___acrt_iob_func:PROC
EXTRN	_fputs:PROC
EXTRN	?What@CRpcError@@QAEXXZ:PROC			; CRpcError::What
EXTRN	?SetScriptPath@CInterpreter@@QAEXQBD@Z:PROC	; CInterpreter::SetScriptPath
EXTRN	?AddHelpCategory@CInterpreter@@QAEXQBD@Z:PROC	; CInterpreter::AddHelpCategory
EXTRN	?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z:PROC ; CInterpreter::AddCommand
EXTRN	?run@CInterpreter@@QAE_NPAU_iobuf@@H@Z:PROC	; CInterpreter::run
EXTRN	?cmd_scan@@YAXAAVCCmdLine@@@Z:PROC		; cmd_scan
EXTRN	?cmd_open@@YAXAAVCCmdLine@@@Z:PROC		; cmd_open
EXTRN	?cmd_close@@YAXAAVCCmdLine@@@Z:PROC		; cmd_close
EXTRN	?cmd_rpclink@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rpclink
EXTRN	?cmd_welcome@@YAXAAVCCmdLine@@@Z:PROC		; cmd_welcome
EXTRN	?cmd_setled@@YAXAAVCCmdLine@@@Z:PROC		; cmd_setled
EXTRN	?cmd_log@@YAXAAVCCmdLine@@@Z:PROC		; cmd_log
EXTRN	?cmd_upgrade@@YAXAAVCCmdLine@@@Z:PROC		; cmd_upgrade
EXTRN	?cmd_rpcinfo@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rpcinfo
EXTRN	?cmd_info@@YAXAAVCCmdLine@@@Z:PROC		; cmd_info
EXTRN	?cmd_ver@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ver
EXTRN	?cmd_version@@YAXAAVCCmdLine@@@Z:PROC		; cmd_version
EXTRN	?cmd_boardid@@YAXAAVCCmdLine@@@Z:PROC		; cmd_boardid
EXTRN	?cmd_init@@YAXAAVCCmdLine@@@Z:PROC		; cmd_init
EXTRN	?cmd_flush@@YAXAAVCCmdLine@@@Z:PROC		; cmd_flush
EXTRN	?cmd_clear@@YAXAAVCCmdLine@@@Z:PROC		; cmd_clear
EXTRN	?cmd_udelay@@YAXAAVCCmdLine@@@Z:PROC		; cmd_udelay
EXTRN	?cmd_mdelay@@YAXAAVCCmdLine@@@Z:PROC		; cmd_mdelay
EXTRN	?cmd_clksrc@@YAXAAVCCmdLine@@@Z:PROC		; cmd_clksrc
EXTRN	?cmd_clkok@@YAXAAVCCmdLine@@@Z:PROC		; cmd_clkok
EXTRN	?cmd_fsel@@YAXAAVCCmdLine@@@Z:PROC		; cmd_fsel
EXTRN	?cmd_stretch@@YAXAAVCCmdLine@@@Z:PROC		; cmd_stretch
EXTRN	?cmd_clk@@YAXAAVCCmdLine@@@Z:PROC		; cmd_clk
EXTRN	?cmd_sda@@YAXAAVCCmdLine@@@Z:PROC		; cmd_sda
EXTRN	?cmd_ctr@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ctr
EXTRN	?cmd_tin@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tin
EXTRN	?cmd_rda@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rda
EXTRN	?cmd_clklvl@@YAXAAVCCmdLine@@@Z:PROC		; cmd_clklvl
EXTRN	?cmd_sdalvl@@YAXAAVCCmdLine@@@Z:PROC		; cmd_sdalvl
EXTRN	?cmd_ctrlvl@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ctrlvl
EXTRN	?cmd_tinlvl@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tinlvl
EXTRN	?cmd_clkmode@@YAXAAVCCmdLine@@@Z:PROC		; cmd_clkmode
EXTRN	?cmd_sdamode@@YAXAAVCCmdLine@@@Z:PROC		; cmd_sdamode
EXTRN	?cmd_ctrmode@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ctrmode
EXTRN	?cmd_tinmode@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tinmode
EXTRN	?cmd_sigoffset@@YAXAAVCCmdLine@@@Z:PROC		; cmd_sigoffset
EXTRN	?cmd_lvds@@YAXAAVCCmdLine@@@Z:PROC		; cmd_lvds
EXTRN	?cmd_lcds@@YAXAAVCCmdLine@@@Z:PROC		; cmd_lcds
EXTRN	?cmd_pon@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pon
EXTRN	?cmd_poff@@YAXAAVCCmdLine@@@Z:PROC		; cmd_poff
EXTRN	?cmd_va@@YAXAAVCCmdLine@@@Z:PROC		; cmd_va
EXTRN	?cmd_vd@@YAXAAVCCmdLine@@@Z:PROC		; cmd_vd
EXTRN	?cmd_ia@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ia
EXTRN	?cmd_id@@YAXAAVCCmdLine@@@Z:PROC		; cmd_id
EXTRN	?cmd_getva@@YAXAAVCCmdLine@@@Z:PROC		; cmd_getva
EXTRN	?cmd_getvd@@YAXAAVCCmdLine@@@Z:PROC		; cmd_getvd
EXTRN	?cmd_getia@@YAXAAVCCmdLine@@@Z:PROC		; cmd_getia
EXTRN	?cmd_getid@@YAXAAVCCmdLine@@@Z:PROC		; cmd_getid
EXTRN	?cmd_hvon@@YAXAAVCCmdLine@@@Z:PROC		; cmd_hvon
EXTRN	?cmd_hvoff@@YAXAAVCCmdLine@@@Z:PROC		; cmd_hvoff
EXTRN	?cmd_reson@@YAXAAVCCmdLine@@@Z:PROC		; cmd_reson
EXTRN	?cmd_resoff@@YAXAAVCCmdLine@@@Z:PROC		; cmd_resoff
EXTRN	?cmd_status@@YAXAAVCCmdLine@@@Z:PROC		; cmd_status
EXTRN	?cmd_rocaddr@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rocaddr
EXTRN	?cmd_d1@@YAXAAVCCmdLine@@@Z:PROC		; cmd_d1
EXTRN	?cmd_d2@@YAXAAVCCmdLine@@@Z:PROC		; cmd_d2
EXTRN	?cmd_ds1@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ds1
EXTRN	?cmd_ds2@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ds2
EXTRN	?cmd_a1@@YAXAAVCCmdLine@@@Z:PROC		; cmd_a1
EXTRN	?cmd_a2@@YAXAAVCCmdLine@@@Z:PROC		; cmd_a2
EXTRN	?cmd_probeadc@@YAXAAVCCmdLine@@@Z:PROC		; cmd_probeadc
EXTRN	?cmd_pgset@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pgset
EXTRN	?cmd_pgstop@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pgstop
EXTRN	?cmd_pgsingle@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pgsingle
EXTRN	?cmd_pgtrig@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pgtrig
EXTRN	?cmd_pgloop@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pgloop
EXTRN	?cmd_trgsel@@YAXAAVCCmdLine@@@Z:PROC		; cmd_trgsel
EXTRN	?cmd_trgdelay@@YAXAAVCCmdLine@@@Z:PROC		; cmd_trgdelay
EXTRN	?cmd_trgtimeout@@YAXAAVCCmdLine@@@Z:PROC	; cmd_trgtimeout
EXTRN	?cmd_trgper@@YAXAAVCCmdLine@@@Z:PROC		; cmd_trgper
EXTRN	?cmd_trgrand@@YAXAAVCCmdLine@@@Z:PROC		; cmd_trgrand
EXTRN	?cmd_trgsend@@YAXAAVCCmdLine@@@Z:PROC		; cmd_trgsend
EXTRN	?cmd_dopen@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dopen
EXTRN	?cmd_dclose@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dclose
EXTRN	?cmd_dstart@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dstart
EXTRN	?cmd_dstop@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dstop
EXTRN	?cmd_dsize@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsize
EXTRN	?cmd_dread@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dread
EXTRN	?cmd_dreadr@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dreadr
EXTRN	?cmd_dreadm@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dreadm
EXTRN	?cmd_dreada@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dreada
EXTRN	?cmd_dselmod@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dselmod
EXTRN	?cmd_dmodres@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dmodres
EXTRN	?cmd_dselroc@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dselroc
EXTRN	?cmd_dselroca@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dselroca
EXTRN	?cmd_dselsim@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dselsim
EXTRN	?cmd_dseloff@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dseloff
EXTRN	?cmd_dsena@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsena
EXTRN	?cmd_dsdis@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsdis
EXTRN	?cmd_dsdisall@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsdisall
EXTRN	?cmd_dssetph@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dssetph
EXTRN	?cmd_dsauto@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsauto
EXTRN	?cmd_dsautoall@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsautoall
EXTRN	?cmd_dsgetxor@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsgetxor
EXTRN	?cmd_dsgetph@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dsgetph
EXTRN	?cmd_gaterun@@YAXAAVCCmdLine@@@Z:PROC		; cmd_gaterun
EXTRN	?cmd_gatesingle@@YAXAAVCCmdLine@@@Z:PROC	; cmd_gatesingle
EXTRN	?cmd_gatestop@@YAXAAVCCmdLine@@@Z:PROC		; cmd_gatestop
EXTRN	?cmd_tbmdis@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tbmdis
EXTRN	?cmd_tbmsel@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tbmsel
EXTRN	?cmd_modsel@@YAXAAVCCmdLine@@@Z:PROC		; cmd_modsel
EXTRN	?cmd_tbmset@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tbmset
EXTRN	?cmd_tbmget@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tbmget
EXTRN	?cmd_tbmgetraw@@YAXAAVCCmdLine@@@Z:PROC		; cmd_tbmgetraw
EXTRN	?cmd_select@@YAXAAVCCmdLine@@@Z:PROC		; cmd_select
EXTRN	?cmd_dac@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dac
EXTRN	?cmd_vdig@@YAXAAVCCmdLine@@@Z:PROC		; cmd_vdig
EXTRN	?cmd_vana@@YAXAAVCCmdLine@@@Z:PROC		; cmd_vana
EXTRN	?cmd_vtrim@@YAXAAVCCmdLine@@@Z:PROC		; cmd_vtrim
EXTRN	?cmd_vthr@@YAXAAVCCmdLine@@@Z:PROC		; cmd_vthr
EXTRN	?cmd_vcal@@YAXAAVCCmdLine@@@Z:PROC		; cmd_vcal
EXTRN	?cmd_caldel@@YAXAAVCCmdLine@@@Z:PROC		; cmd_caldel
EXTRN	?cmd_adcref@@YAXAAVCCmdLine@@@Z:PROC		; cmd_adcref
EXTRN	?cmd_adcoffset@@YAXAAVCCmdLine@@@Z:PROC		; cmd_adcoffset
EXTRN	?cmd_wbc@@YAXAAVCCmdLine@@@Z:PROC		; cmd_wbc
EXTRN	?cmd_ctl@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ctl
EXTRN	?cmd_cole@@YAXAAVCCmdLine@@@Z:PROC		; cmd_cole
EXTRN	?cmd_cold@@YAXAAVCCmdLine@@@Z:PROC		; cmd_cold
EXTRN	?cmd_pixe@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pixe
EXTRN	?cmd_pixd@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pixd
EXTRN	?cmd_cal@@YAXAAVCCmdLine@@@Z:PROC		; cmd_cal
EXTRN	?cmd_cals@@YAXAAVCCmdLine@@@Z:PROC		; cmd_cals
EXTRN	?cmd_cald@@YAXAAVCCmdLine@@@Z:PROC		; cmd_cald
EXTRN	?cmd_mask@@YAXAAVCCmdLine@@@Z:PROC		; cmd_mask
EXTRN	?cmd_gettemp@@YAXAAVCCmdLine@@@Z:PROC		; cmd_gettemp
EXTRN	?cmd_roctype@@YAXAAVCCmdLine@@@Z:PROC		; cmd_roctype
EXTRN	?cmd_pr@@YAXAAVCCmdLine@@@Z:PROC		; cmd_pr
EXTRN	?cmd_sep@@YAXAAVCCmdLine@@@Z:PROC		; cmd_sep
EXTRN	?cmd_contact@@YAXAAVCCmdLine@@@Z:PROC		; cmd_contact
EXTRN	?cmd_test@@YAXAAVCCmdLine@@@Z:PROC		; cmd_test
EXTRN	?cmd_chippos@@YAXAAVCCmdLine@@@Z:PROC		; cmd_chippos
EXTRN	?cmd_go@@YAXAAVCCmdLine@@@Z:PROC		; cmd_go
EXTRN	?cmd_first@@YAXAAVCCmdLine@@@Z:PROC		; cmd_first
EXTRN	?cmd_next@@YAXAAVCCmdLine@@@Z:PROC		; cmd_next
EXTRN	?cmd_goto@@YAXAAVCCmdLine@@@Z:PROC		; cmd_goto
EXTRN	?cmd_showclk@@YAXAAVCCmdLine@@@Z:PROC		; cmd_showclk
EXTRN	?cmd_showctr@@YAXAAVCCmdLine@@@Z:PROC		; cmd_showctr
EXTRN	?cmd_showsda@@YAXAAVCCmdLine@@@Z:PROC		; cmd_showsda
EXTRN	?cmd_decoding@@YAXAAVCCmdLine@@@Z:PROC		; cmd_decoding
EXTRN	?cmd_showrocdata@@YAXAAVCCmdLine@@@Z:PROC	; cmd_showrocdata
EXTRN	?cmd_vectortest@@YAXAAVCCmdLine@@@Z:PROC	; cmd_vectortest
EXTRN	?cmd_daqtest@@YAXAAVCCmdLine@@@Z:PROC		; cmd_daqtest
EXTRN	?cmd_daqtest2@@YAXAAVCCmdLine@@@Z:PROC		; cmd_daqtest2
EXTRN	?cmd_daqerrorcheckm@@YAXAAVCCmdLine@@@Z:PROC	; cmd_daqerrorcheckm
EXTRN	?cmd_desergatescan@@YAXAAVCCmdLine@@@Z:PROC	; cmd_desergatescan
EXTRN	?cmd_daqreadm@@YAXAAVCCmdLine@@@Z:PROC		; cmd_daqreadm
EXTRN	?cmd_daqreadt@@YAXAAVCCmdLine@@@Z:PROC		; cmd_daqreadt
EXTRN	?cmd_analyze@@YAXAAVCCmdLine@@@Z:PROC		; cmd_analyze
EXTRN	?cmd_ethsend@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ethsend
EXTRN	?cmd_ethrx@@YAXAAVCCmdLine@@@Z:PROC		; cmd_ethrx
EXTRN	?cmd_shmoo@@YAXAAVCCmdLine@@@Z:PROC		; cmd_shmoo
EXTRN	?cmd_deser160@@YAXAAVCCmdLine@@@Z:PROC		; cmd_deser160
EXTRN	?cmd_phscan@@YAXAAVCCmdLine@@@Z:PROC		; cmd_phscan
EXTRN	?cmd_scanaddr@@YAXAAVCCmdLine@@@Z:PROC		; cmd_scanaddr
EXTRN	?cmd_scanphxy@@YAXAAVCCmdLine@@@Z:PROC		; cmd_scanphxy
EXTRN	?cmd_scanph@@YAXAAVCCmdLine@@@Z:PROC		; cmd_scanph
EXTRN	?cmd_dbmatch@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dbmatch
EXTRN	?cmd_dbmatch2@@YAXAAVCCmdLine@@@Z:PROC		; cmd_dbmatch2
EXTRN	?cmd_evenodd@@YAXAAVCCmdLine@@@Z:PROC		; cmd_evenodd
EXTRN	?cmd_multiread@@YAXAAVCCmdLine@@@Z:PROC		; cmd_multiread
EXTRN	?cmd_cluster@@YAXAAVCCmdLine@@@Z:PROC		; cmd_cluster
EXTRN	?cmd_cluster2@@YAXAAVCCmdLine@@@Z:PROC		; cmd_cluster2
EXTRN	?cmd_db1@@YAXAAVCCmdLine@@@Z:PROC		; cmd_db1
EXTRN	?cmd_enapx@@YAXAAVCCmdLine@@@Z:PROC		; cmd_enapx
EXTRN	?cmd_rotest0@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rotest0
EXTRN	?cmd_rotest1@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rotest1
EXTRN	?cmd_rotest2@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rotest2
EXTRN	?cmd_rotest3@@YAXAAVCCmdLine@@@Z:PROC		; cmd_rotest3
EXTRN	?cmd_idslope@@YAXAAVCCmdLine@@@Z:PROC		; cmd_idslope
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?settings@@3VCSettings@@A:BYTE			; settings
EXTRN	?cmd_intp@@3VCInterpreter@@A:BYTE		; cmd_intp
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R0?AVCRpcError@@@8
data$r	SEGMENT
??_R0?AVCRpcError@@@8 DD FLAT:??_7type_info@@6B@	; CRpcError `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRpcError@@', 00H
data$r	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__ehhandler$?cmd@@YAXXZ
	DD	09H
voltbl	ENDS
xdata$x	SEGMENT
__catchsym$?cmd@@YAXXZ$2 DD 00H
	DD	FLAT:??_R0?AVCRpcError@@@8
	DD	0ffffffe4H
	DD	FLAT:__catch$?cmd@@YAXXZ$0
__unwindtable$?cmd@@YAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?cmd@@YAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?cmd@@YAXXZ$2
__ehfuncinfo$?cmd@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?cmd@@YAXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?cmd@@YAXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 266  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 267  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd.cpp
_TEXT	SEGMENT
_par$ = 8						; size = 4
?cmd_h@@YAXAAVCCmdLine@@@Z PROC				; cmd_h

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	cmdHelp();

  00003	e8 00 00 00 00	 call	 ?cmdHelp@@YAXXZ		; cmdHelp

; 61   : }

  00008	3b ec		 cmp	 ebp, esp
  0000a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?cmd_h@@YAXAAVCCmdLine@@@Z ENDP				; cmd_h
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd.cpp
_TEXT	SEGMENT
?cmdHelp@@YAXXZ PROC					; cmdHelp

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (settings.proberPort >= 0)

  00003	83 3d 34 00 00
	00 00		 cmp	 DWORD PTR ?settings@@3VCSettings@@A+52, 0
  0000a	7c 1a		 jl	 SHORT $LN2@cmdHelp

; 26   : 	{
; 27   : 	 fputs("\n"

  0000c	6a 01		 push	 1
  0000e	e8 00 00 00 00	 call	 ___acrt_iob_func
  00013	83 c4 04	 add	 esp, 4
  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET $SG142210
  0001c	e8 00 00 00 00	 call	 _fputs
  00021	83 c4 08	 add	 esp, 8

; 28   : 	 "+-- control commands ------------------------------------------+\n"
; 29   : 	 "| h                  display this text                         |\n"
; 30   : 	 "| exit               exit commander                            |\n"
; 31   : 	 "+-- wafer test ------------------------------------------------+\n"
; 32   : 	 "| go                 start wafer test (press <cr> to stop)     |\n"
; 33   : 	 "| test               run chip test                             |\n"
; 34   : 	 "| pr <command>       send command to prober                    |\n"
; 35   : 	 "| sep                prober z-axis separation                  |\n"
; 36   : 	 "| contact            prober z-axis contact                     |\n"
; 37   : 	 "| first              go to first die and clear wafer map       |\n"
; 38   : 	 "| next               go to next die                            |\n"
; 39   : 	 "| goto <x> <y>       go to specifed die                        |\n"
; 40   : 	 "| chippos <ABCD>     move to chip A, B, C or D                 |\n"
; 41   : 	 "+--------------------------------------------------------------+\n",
; 42   : 	 stdout);
; 43   : 	}

  00024	eb 18		 jmp	 SHORT $LN1@cmdHelp
$LN2@cmdHelp:

; 44   : 	else
; 45   : 	{
; 46   : 	 fputs("\n"

  00026	6a 01		 push	 1
  00028	e8 00 00 00 00	 call	 ___acrt_iob_func
  0002d	83 c4 04	 add	 esp, 4
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET $SG142211
  00036	e8 00 00 00 00	 call	 _fputs
  0003b	83 c4 08	 add	 esp, 8
$LN1@cmdHelp:

; 47   : 	 "+-- control commands ------------------------------------------+\n"
; 48   : 	 "| h                  display this text                         |\n"
; 49   : 	 "| exit               exit commander                            |\n"
; 50   : 	 "+-- chip test -------------------------------------------------+\n"
; 51   : 	 "| test <chip id>     run chip test                             |\n"
; 52   : 	 "+--------------------------------------------------------------+\n",
; 53   : 	 stdout);
; 54   : 	}
; 55   : }

  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?cmdHelp@@YAXXZ ENDP					; cmdHelp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd.cpp
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd_dtb.h
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd_wafertest.h
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd_analyzer.h
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd.cpp
_TEXT	SEGMENT
_e$2 = -28						; size = 8
__$EHRec$ = -16						; size = 16
?cmd@@YAXXZ PROC					; cmd

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?cmd@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 10	 sub	 esp, 16			; 00000010H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd_dtb.h

; 20   : HELP_CAT("dtb");

  0003d	68 00 00 00 00	 push	 OFFSET $SG142220
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00047	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 21   : 
; 22   : CMD_REG(scan, "", "Get infos of all connected DTBs")

  0004c	68 00 00 00 00	 push	 OFFSET $SG142221
  00051	68 00 00 00 00	 push	 OFFSET $SG142222
  00056	68 00 00 00 00	 push	 OFFSET ?cmd_scan@@YAXAAVCCmdLine@@@Z ; cmd_scan
  0005b	68 00 00 00 00	 push	 OFFSET $SG142223
  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00065	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 23   : CMD_REG(open, "[<name>]", "open a DTB (with name)")

  0006a	68 00 00 00 00	 push	 OFFSET $SG142224
  0006f	68 00 00 00 00	 push	 OFFSET $SG142225
  00074	68 00 00 00 00	 push	 OFFSET ?cmd_open@@YAXAAVCCmdLine@@@Z ; cmd_open
  00079	68 00 00 00 00	 push	 OFFSET $SG142226
  0007e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00083	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 24   : CMD_REG(close, "", "close DTB connection")

  00088	68 00 00 00 00	 push	 OFFSET $SG142227
  0008d	68 00 00 00 00	 push	 OFFSET $SG142228
  00092	68 00 00 00 00	 push	 OFFSET ?cmd_close@@YAXAAVCCmdLine@@@Z ; cmd_close
  00097	68 00 00 00 00	 push	 OFFSET $SG142229
  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  000a1	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 25   : CMD_REG(rpclink, "", "link all DTB functions")

  000a6	68 00 00 00 00	 push	 OFFSET $SG142230
  000ab	68 00 00 00 00	 push	 OFFSET $SG142231
  000b0	68 00 00 00 00	 push	 OFFSET ?cmd_rpclink@@YAXAAVCCmdLine@@@Z ; cmd_rpclink
  000b5	68 00 00 00 00	 push	 OFFSET $SG142232
  000ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  000bf	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 26   : CMD_REG(welcome, "", "blink with LEDs")

  000c4	68 00 00 00 00	 push	 OFFSET $SG142233
  000c9	68 00 00 00 00	 push	 OFFSET $SG142234
  000ce	68 00 00 00 00	 push	 OFFSET ?cmd_welcome@@YAXAAVCCmdLine@@@Z ; cmd_welcome
  000d3	68 00 00 00 00	 push	 OFFSET $SG142235
  000d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  000dd	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 27   : CMD_REG(setled, "<mask>", "set atb LEDs")

  000e2	68 00 00 00 00	 push	 OFFSET $SG142236
  000e7	68 00 00 00 00	 push	 OFFSET $SG142237
  000ec	68 00 00 00 00	 push	 OFFSET ?cmd_setled@@YAXAAVCCmdLine@@@Z ; cmd_setled
  000f1	68 00 00 00 00	 push	 OFFSET $SG142238
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  000fb	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 28   : CMD_REG(log, "<text>", "writes text to log file")

  00100	68 00 00 00 00	 push	 OFFSET $SG142239
  00105	68 00 00 00 00	 push	 OFFSET $SG142240
  0010a	68 00 00 00 00	 push	 OFFSET ?cmd_log@@YAXAAVCCmdLine@@@Z ; cmd_log
  0010f	68 00 00 00 00	 push	 OFFSET $SG142241
  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00119	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 29   : CMD_REG(upgrade, "<filename>", "upgrade DTB")

  0011e	68 00 00 00 00	 push	 OFFSET $SG142242
  00123	68 00 00 00 00	 push	 OFFSET $SG142243
  00128	68 00 00 00 00	 push	 OFFSET ?cmd_upgrade@@YAXAAVCCmdLine@@@Z ; cmd_upgrade
  0012d	68 00 00 00 00	 push	 OFFSET $SG142244
  00132	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00137	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 30   : CMD_REG(rpcinfo, "", "list all DTB functions")

  0013c	68 00 00 00 00	 push	 OFFSET $SG142245
  00141	68 00 00 00 00	 push	 OFFSET $SG142246
  00146	68 00 00 00 00	 push	 OFFSET ?cmd_rpcinfo@@YAXAAVCCmdLine@@@Z ; cmd_rpcinfo
  0014b	68 00 00 00 00	 push	 OFFSET $SG142247
  00150	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00155	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 31   : CMD_REG(info, "", "show detailed DTB info")

  0015a	68 00 00 00 00	 push	 OFFSET $SG142248
  0015f	68 00 00 00 00	 push	 OFFSET $SG142249
  00164	68 00 00 00 00	 push	 OFFSET ?cmd_info@@YAXAAVCCmdLine@@@Z ; cmd_info
  00169	68 00 00 00 00	 push	 OFFSET $SG142250
  0016e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00173	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 32   : CMD_REG(ver, "", "shows DTB software version number")

  00178	68 00 00 00 00	 push	 OFFSET $SG142251
  0017d	68 00 00 00 00	 push	 OFFSET $SG142252
  00182	68 00 00 00 00	 push	 OFFSET ?cmd_ver@@YAXAAVCCmdLine@@@Z ; cmd_ver
  00187	68 00 00 00 00	 push	 OFFSET $SG142253
  0018c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00191	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 33   : CMD_REG(version, "", "shows DTB software version")

  00196	68 00 00 00 00	 push	 OFFSET $SG142254
  0019b	68 00 00 00 00	 push	 OFFSET $SG142255
  001a0	68 00 00 00 00	 push	 OFFSET ?cmd_version@@YAXAAVCCmdLine@@@Z ; cmd_version
  001a5	68 00 00 00 00	 push	 OFFSET $SG142256
  001aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  001af	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 34   : CMD_REG(boardid, "", "get board id")

  001b4	68 00 00 00 00	 push	 OFFSET $SG142257
  001b9	68 00 00 00 00	 push	 OFFSET $SG142258
  001be	68 00 00 00 00	 push	 OFFSET ?cmd_boardid@@YAXAAVCCmdLine@@@Z ; cmd_boardid
  001c3	68 00 00 00 00	 push	 OFFSET $SG142259
  001c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  001cd	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 35   : CMD_REG(init, "", "inits the testboard")

  001d2	68 00 00 00 00	 push	 OFFSET $SG142260
  001d7	68 00 00 00 00	 push	 OFFSET $SG142261
  001dc	68 00 00 00 00	 push	 OFFSET ?cmd_init@@YAXAAVCCmdLine@@@Z ; cmd_init
  001e1	68 00 00 00 00	 push	 OFFSET $SG142262
  001e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  001eb	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 36   : CMD_REG(flush, "", "flushes usb buffer")

  001f0	68 00 00 00 00	 push	 OFFSET $SG142263
  001f5	68 00 00 00 00	 push	 OFFSET $SG142264
  001fa	68 00 00 00 00	 push	 OFFSET ?cmd_flush@@YAXAAVCCmdLine@@@Z ; cmd_flush
  001ff	68 00 00 00 00	 push	 OFFSET $SG142265
  00204	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00209	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 37   : CMD_REG(clear, "", "clears usb data buffer")

  0020e	68 00 00 00 00	 push	 OFFSET $SG142266
  00213	68 00 00 00 00	 push	 OFFSET $SG142267
  00218	68 00 00 00 00	 push	 OFFSET ?cmd_clear@@YAXAAVCCmdLine@@@Z ; cmd_clear
  0021d	68 00 00 00 00	 push	 OFFSET $SG142268
  00222	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00227	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 38   : 
; 39   : // =======================================================================
; 40   : //  delay commands
; 41   : // =======================================================================
; 42   : 
; 43   : CMD_REG(udelay, "<us>", "waits <us> microseconds")

  0022c	68 00 00 00 00	 push	 OFFSET $SG142269
  00231	68 00 00 00 00	 push	 OFFSET $SG142270
  00236	68 00 00 00 00	 push	 OFFSET ?cmd_udelay@@YAXAAVCCmdLine@@@Z ; cmd_udelay
  0023b	68 00 00 00 00	 push	 OFFSET $SG142271
  00240	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00245	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 44   : CMD_REG(mdelay, "<ms>", "waits <ms> milliseconds")

  0024a	68 00 00 00 00	 push	 OFFSET $SG142272
  0024f	68 00 00 00 00	 push	 OFFSET $SG142273
  00254	68 00 00 00 00	 push	 OFFSET ?cmd_mdelay@@YAXAAVCCmdLine@@@Z ; cmd_mdelay
  00259	68 00 00 00 00	 push	 OFFSET $SG142274
  0025e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00263	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 45   : 
; 46   : 
; 47   : // =======================================================================
; 48   : //  test board commands
; 49   : // =======================================================================
; 50   : 
; 51   : CMD_REG(clksrc, "<source>", "Select clock source (1=ext, 0=int)")

  00268	68 00 00 00 00	 push	 OFFSET $SG142275
  0026d	68 00 00 00 00	 push	 OFFSET $SG142276
  00272	68 00 00 00 00	 push	 OFFSET ?cmd_clksrc@@YAXAAVCCmdLine@@@Z ; cmd_clksrc
  00277	68 00 00 00 00	 push	 OFFSET $SG142277
  0027c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00281	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 52   : CMD_REG(clkok, "clkok", "Check if ext clock is present")

  00286	68 00 00 00 00	 push	 OFFSET $SG142278
  0028b	68 00 00 00 00	 push	 OFFSET $SG142279
  00290	68 00 00 00 00	 push	 OFFSET ?cmd_clkok@@YAXAAVCCmdLine@@@Z ; cmd_clkok
  00295	68 00 00 00 00	 push	 OFFSET $SG142280
  0029a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0029f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 53   : CMD_REG(fsel, "<freqdiv>", "clock frequency select")

  002a4	68 00 00 00 00	 push	 OFFSET $SG142281
  002a9	68 00 00 00 00	 push	 OFFSET $SG142282
  002ae	68 00 00 00 00	 push	 OFFSET ?cmd_fsel@@YAXAAVCCmdLine@@@Z ; cmd_fsel
  002b3	68 00 00 00 00	 push	 OFFSET $SG142283
  002b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  002bd	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 54   : CMD_REG(stretch, "<src> <delay> <width>", "stretch clock")

  002c2	68 00 00 00 00	 push	 OFFSET $SG142284
  002c7	68 00 00 00 00	 push	 OFFSET $SG142285
  002cc	68 00 00 00 00	 push	 OFFSET ?cmd_stretch@@YAXAAVCCmdLine@@@Z ; cmd_stretch
  002d1	68 00 00 00 00	 push	 OFFSET $SG142286
  002d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  002db	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 55   : CMD_REG(clk, "<delay>", "clk delay")

  002e0	68 00 00 00 00	 push	 OFFSET $SG142287
  002e5	68 00 00 00 00	 push	 OFFSET $SG142288
  002ea	68 00 00 00 00	 push	 OFFSET ?cmd_clk@@YAXAAVCCmdLine@@@Z ; cmd_clk
  002ef	68 00 00 00 00	 push	 OFFSET $SG142289
  002f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  002f9	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 56   : CMD_REG(sda, "<delay>", "sda delay")

  002fe	68 00 00 00 00	 push	 OFFSET $SG142290
  00303	68 00 00 00 00	 push	 OFFSET $SG142291
  00308	68 00 00 00 00	 push	 OFFSET ?cmd_sda@@YAXAAVCCmdLine@@@Z ; cmd_sda
  0030d	68 00 00 00 00	 push	 OFFSET $SG142292
  00312	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00317	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 57   : CMD_REG(ctr, "<delay>", "ctr delay")

  0031c	68 00 00 00 00	 push	 OFFSET $SG142293
  00321	68 00 00 00 00	 push	 OFFSET $SG142294
  00326	68 00 00 00 00	 push	 OFFSET ?cmd_ctr@@YAXAAVCCmdLine@@@Z ; cmd_ctr
  0032b	68 00 00 00 00	 push	 OFFSET $SG142295
  00330	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00335	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 58   : CMD_REG(tin, "<delay>", "tin delay")

  0033a	68 00 00 00 00	 push	 OFFSET $SG142296
  0033f	68 00 00 00 00	 push	 OFFSET $SG142297
  00344	68 00 00 00 00	 push	 OFFSET ?cmd_tin@@YAXAAVCCmdLine@@@Z ; cmd_tin
  00349	68 00 00 00 00	 push	 OFFSET $SG142298
  0034e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00353	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 59   : CMD_REG(rda, "<delay>", "rda/tout delay")

  00358	68 00 00 00 00	 push	 OFFSET $SG142299
  0035d	68 00 00 00 00	 push	 OFFSET $SG142300
  00362	68 00 00 00 00	 push	 OFFSET ?cmd_rda@@YAXAAVCCmdLine@@@Z ; cmd_rda
  00367	68 00 00 00 00	 push	 OFFSET $SG142301
  0036c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00371	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 60   : CMD_REG(clklvl, "<level>", "clk signal level")

  00376	68 00 00 00 00	 push	 OFFSET $SG142302
  0037b	68 00 00 00 00	 push	 OFFSET $SG142303
  00380	68 00 00 00 00	 push	 OFFSET ?cmd_clklvl@@YAXAAVCCmdLine@@@Z ; cmd_clklvl
  00385	68 00 00 00 00	 push	 OFFSET $SG142304
  0038a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0038f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 61   : CMD_REG(sdalvl, "<level>", "sda signel level")

  00394	68 00 00 00 00	 push	 OFFSET $SG142305
  00399	68 00 00 00 00	 push	 OFFSET $SG142306
  0039e	68 00 00 00 00	 push	 OFFSET ?cmd_sdalvl@@YAXAAVCCmdLine@@@Z ; cmd_sdalvl
  003a3	68 00 00 00 00	 push	 OFFSET $SG142307
  003a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  003ad	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 62   : CMD_REG(ctrlvl, "<level>", "ctr signel level")

  003b2	68 00 00 00 00	 push	 OFFSET $SG142308
  003b7	68 00 00 00 00	 push	 OFFSET $SG142309
  003bc	68 00 00 00 00	 push	 OFFSET ?cmd_ctrlvl@@YAXAAVCCmdLine@@@Z ; cmd_ctrlvl
  003c1	68 00 00 00 00	 push	 OFFSET $SG142310
  003c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  003cb	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 63   : CMD_REG(tinlvl, "<level>", "tin signel level")

  003d0	68 00 00 00 00	 push	 OFFSET $SG142311
  003d5	68 00 00 00 00	 push	 OFFSET $SG142312
  003da	68 00 00 00 00	 push	 OFFSET ?cmd_tinlvl@@YAXAAVCCmdLine@@@Z ; cmd_tinlvl
  003df	68 00 00 00 00	 push	 OFFSET $SG142313
  003e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  003e9	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 64   : CMD_REG(clkmode, "<mode>", "clk mode")

  003ee	68 00 00 00 00	 push	 OFFSET $SG142314
  003f3	68 00 00 00 00	 push	 OFFSET $SG142315
  003f8	68 00 00 00 00	 push	 OFFSET ?cmd_clkmode@@YAXAAVCCmdLine@@@Z ; cmd_clkmode
  003fd	68 00 00 00 00	 push	 OFFSET $SG142316
  00402	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00407	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 65   : CMD_REG(sdamode, "<mode>", "sda mode")

  0040c	68 00 00 00 00	 push	 OFFSET $SG142317
  00411	68 00 00 00 00	 push	 OFFSET $SG142318
  00416	68 00 00 00 00	 push	 OFFSET ?cmd_sdamode@@YAXAAVCCmdLine@@@Z ; cmd_sdamode
  0041b	68 00 00 00 00	 push	 OFFSET $SG142319
  00420	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00425	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 66   : CMD_REG(ctrmode, "<mode>", "ctr mode")

  0042a	68 00 00 00 00	 push	 OFFSET $SG142320
  0042f	68 00 00 00 00	 push	 OFFSET $SG142321
  00434	68 00 00 00 00	 push	 OFFSET ?cmd_ctrmode@@YAXAAVCCmdLine@@@Z ; cmd_ctrmode
  00439	68 00 00 00 00	 push	 OFFSET $SG142322
  0043e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00443	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 67   : CMD_REG(tinmode, "<mode>", "tin mode")

  00448	68 00 00 00 00	 push	 OFFSET $SG142323
  0044d	68 00 00 00 00	 push	 OFFSET $SG142324
  00452	68 00 00 00 00	 push	 OFFSET ?cmd_tinmode@@YAXAAVCCmdLine@@@Z ; cmd_tinmode
  00457	68 00 00 00 00	 push	 OFFSET $SG142325
  0045c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00461	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 68   : CMD_REG(sigoffset, "<offset>", "output signal offset")

  00466	68 00 00 00 00	 push	 OFFSET $SG142326
  0046b	68 00 00 00 00	 push	 OFFSET $SG142327
  00470	68 00 00 00 00	 push	 OFFSET ?cmd_sigoffset@@YAXAAVCCmdLine@@@Z ; cmd_sigoffset
  00475	68 00 00 00 00	 push	 OFFSET $SG142328
  0047a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0047f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 69   : CMD_REG(lvds, "", "LVDS inputs")

  00484	68 00 00 00 00	 push	 OFFSET $SG142329
  00489	68 00 00 00 00	 push	 OFFSET $SG142330
  0048e	68 00 00 00 00	 push	 OFFSET ?cmd_lvds@@YAXAAVCCmdLine@@@Z ; cmd_lvds
  00493	68 00 00 00 00	 push	 OFFSET $SG142331
  00498	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0049d	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 70   : CMD_REG(lcds, "", "LCDS inputs")

  004a2	68 00 00 00 00	 push	 OFFSET $SG142332
  004a7	68 00 00 00 00	 push	 OFFSET $SG142333
  004ac	68 00 00 00 00	 push	 OFFSET ?cmd_lcds@@YAXAAVCCmdLine@@@Z ; cmd_lcds
  004b1	68 00 00 00 00	 push	 OFFSET $SG142334
  004b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  004bb	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 71   : // CMD_REG(tout, "", "")
; 72   : // CMD_REG(trigout, "", "")
; 73   : CMD_REG(pon, "", "switch ROC power on")

  004c0	68 00 00 00 00	 push	 OFFSET $SG142335
  004c5	68 00 00 00 00	 push	 OFFSET $SG142336
  004ca	68 00 00 00 00	 push	 OFFSET ?cmd_pon@@YAXAAVCCmdLine@@@Z ; cmd_pon
  004cf	68 00 00 00 00	 push	 OFFSET $SG142337
  004d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  004d9	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 74   : CMD_REG(poff, "", "switch ROC power off")

  004de	68 00 00 00 00	 push	 OFFSET $SG142338
  004e3	68 00 00 00 00	 push	 OFFSET $SG142339
  004e8	68 00 00 00 00	 push	 OFFSET ?cmd_poff@@YAXAAVCCmdLine@@@Z ; cmd_poff
  004ed	68 00 00 00 00	 push	 OFFSET $SG142340
  004f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  004f7	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 75   : CMD_REG(va, "<mV>", "set VA in mV")

  004fc	68 00 00 00 00	 push	 OFFSET $SG142341
  00501	68 00 00 00 00	 push	 OFFSET $SG142342
  00506	68 00 00 00 00	 push	 OFFSET ?cmd_va@@YAXAAVCCmdLine@@@Z ; cmd_va
  0050b	68 00 00 00 00	 push	 OFFSET $SG142343
  00510	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00515	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 76   : CMD_REG(vd, "<mV>", "set VD in mV")

  0051a	68 00 00 00 00	 push	 OFFSET $SG142344
  0051f	68 00 00 00 00	 push	 OFFSET $SG142345
  00524	68 00 00 00 00	 push	 OFFSET ?cmd_vd@@YAXAAVCCmdLine@@@Z ; cmd_vd
  00529	68 00 00 00 00	 push	 OFFSET $SG142346
  0052e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00533	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 77   : CMD_REG(ia, "<mA>", "set IA in mA")

  00538	68 00 00 00 00	 push	 OFFSET $SG142347
  0053d	68 00 00 00 00	 push	 OFFSET $SG142348
  00542	68 00 00 00 00	 push	 OFFSET ?cmd_ia@@YAXAAVCCmdLine@@@Z ; cmd_ia
  00547	68 00 00 00 00	 push	 OFFSET $SG142349
  0054c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00551	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 78   : CMD_REG(id, "<mA>", "set ID in mA")

  00556	68 00 00 00 00	 push	 OFFSET $SG142350
  0055b	68 00 00 00 00	 push	 OFFSET $SG142351
  00560	68 00 00 00 00	 push	 OFFSET ?cmd_id@@YAXAAVCCmdLine@@@Z ; cmd_id
  00565	68 00 00 00 00	 push	 OFFSET $SG142352
  0056a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0056f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 79   : CMD_REG(getva, "", "get VA in V")

  00574	68 00 00 00 00	 push	 OFFSET $SG142353
  00579	68 00 00 00 00	 push	 OFFSET $SG142354
  0057e	68 00 00 00 00	 push	 OFFSET ?cmd_getva@@YAXAAVCCmdLine@@@Z ; cmd_getva
  00583	68 00 00 00 00	 push	 OFFSET $SG142355
  00588	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0058d	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 80   : CMD_REG(getvd, "", "get VD in V")

  00592	68 00 00 00 00	 push	 OFFSET $SG142356
  00597	68 00 00 00 00	 push	 OFFSET $SG142357
  0059c	68 00 00 00 00	 push	 OFFSET ?cmd_getvd@@YAXAAVCCmdLine@@@Z ; cmd_getvd
  005a1	68 00 00 00 00	 push	 OFFSET $SG142358
  005a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  005ab	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 81   : CMD_REG(getia, "", "get IA in mA")

  005b0	68 00 00 00 00	 push	 OFFSET $SG142359
  005b5	68 00 00 00 00	 push	 OFFSET $SG142360
  005ba	68 00 00 00 00	 push	 OFFSET ?cmd_getia@@YAXAAVCCmdLine@@@Z ; cmd_getia
  005bf	68 00 00 00 00	 push	 OFFSET $SG142361
  005c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  005c9	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 82   : CMD_REG(getid, "", "get ID in mA")

  005ce	68 00 00 00 00	 push	 OFFSET $SG142362
  005d3	68 00 00 00 00	 push	 OFFSET $SG142363
  005d8	68 00 00 00 00	 push	 OFFSET ?cmd_getid@@YAXAAVCCmdLine@@@Z ; cmd_getid
  005dd	68 00 00 00 00	 push	 OFFSET $SG142364
  005e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  005e7	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 83   : CMD_REG(hvon, "", "switch HV on")

  005ec	68 00 00 00 00	 push	 OFFSET $SG142365
  005f1	68 00 00 00 00	 push	 OFFSET $SG142366
  005f6	68 00 00 00 00	 push	 OFFSET ?cmd_hvon@@YAXAAVCCmdLine@@@Z ; cmd_hvon
  005fb	68 00 00 00 00	 push	 OFFSET $SG142367
  00600	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00605	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 84   : CMD_REG(hvoff, "", "switch HV off")

  0060a	68 00 00 00 00	 push	 OFFSET $SG142368
  0060f	68 00 00 00 00	 push	 OFFSET $SG142369
  00614	68 00 00 00 00	 push	 OFFSET ?cmd_hvoff@@YAXAAVCCmdLine@@@Z ; cmd_hvoff
  00619	68 00 00 00 00	 push	 OFFSET $SG142370
  0061e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00623	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 85   : CMD_REG(reson, "", "activate reset")

  00628	68 00 00 00 00	 push	 OFFSET $SG142371
  0062d	68 00 00 00 00	 push	 OFFSET $SG142372
  00632	68 00 00 00 00	 push	 OFFSET ?cmd_reson@@YAXAAVCCmdLine@@@Z ; cmd_reson
  00637	68 00 00 00 00	 push	 OFFSET $SG142373
  0063c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00641	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 86   : CMD_REG(resoff, "", "deactivate reset")

  00646	68 00 00 00 00	 push	 OFFSET $SG142374
  0064b	68 00 00 00 00	 push	 OFFSET $SG142375
  00650	68 00 00 00 00	 push	 OFFSET ?cmd_resoff@@YAXAAVCCmdLine@@@Z ; cmd_resoff
  00655	68 00 00 00 00	 push	 OFFSET $SG142376
  0065a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0065f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 87   : CMD_REG(status, "", "shows testboard status")

  00664	68 00 00 00 00	 push	 OFFSET $SG142377
  00669	68 00 00 00 00	 push	 OFFSET $SG142378
  0066e	68 00 00 00 00	 push	 OFFSET ?cmd_status@@YAXAAVCCmdLine@@@Z ; cmd_status
  00673	68 00 00 00 00	 push	 OFFSET $SG142379
  00678	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0067d	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 88   : CMD_REG(rocaddr, "", "set ROC address")

  00682	68 00 00 00 00	 push	 OFFSET $SG142380
  00687	68 00 00 00 00	 push	 OFFSET $SG142381
  0068c	68 00 00 00 00	 push	 OFFSET ?cmd_rocaddr@@YAXAAVCCmdLine@@@Z ; cmd_rocaddr
  00691	68 00 00 00 00	 push	 OFFSET $SG142382
  00696	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0069b	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 89   : CMD_REG(d1, "<signal>", "assign signal to D1 output")

  006a0	68 00 00 00 00	 push	 OFFSET $SG142383
  006a5	68 00 00 00 00	 push	 OFFSET $SG142384
  006aa	68 00 00 00 00	 push	 OFFSET ?cmd_d1@@YAXAAVCCmdLine@@@Z ; cmd_d1
  006af	68 00 00 00 00	 push	 OFFSET $SG142385
  006b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  006b9	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 90   : CMD_REG(d2, "<signal>", "assign signal to D2 outout")

  006be	68 00 00 00 00	 push	 OFFSET $SG142386
  006c3	68 00 00 00 00	 push	 OFFSET $SG142387
  006c8	68 00 00 00 00	 push	 OFFSET ?cmd_d2@@YAXAAVCCmdLine@@@Z ; cmd_d2
  006cd	68 00 00 00 00	 push	 OFFSET $SG142388
  006d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  006d7	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 91   : CMD_REG(ds1, "<deser> <signal>", "assign deser signal to D1 output")

  006dc	68 00 00 00 00	 push	 OFFSET $SG142389
  006e1	68 00 00 00 00	 push	 OFFSET $SG142390
  006e6	68 00 00 00 00	 push	 OFFSET ?cmd_ds1@@YAXAAVCCmdLine@@@Z ; cmd_ds1
  006eb	68 00 00 00 00	 push	 OFFSET $SG142391
  006f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  006f5	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 92   : CMD_REG(ds2, "<deser> <signal>", "assign deser signal to D2 outout")

  006fa	68 00 00 00 00	 push	 OFFSET $SG142392
  006ff	68 00 00 00 00	 push	 OFFSET $SG142393
  00704	68 00 00 00 00	 push	 OFFSET ?cmd_ds2@@YAXAAVCCmdLine@@@Z ; cmd_ds2
  00709	68 00 00 00 00	 push	 OFFSET $SG142394
  0070e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00713	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 93   : CMD_REG(a1, "<signal>", "assign analog signal to A1 output")

  00718	68 00 00 00 00	 push	 OFFSET $SG142395
  0071d	68 00 00 00 00	 push	 OFFSET $SG142396
  00722	68 00 00 00 00	 push	 OFFSET ?cmd_a1@@YAXAAVCCmdLine@@@Z ; cmd_a1
  00727	68 00 00 00 00	 push	 OFFSET $SG142397
  0072c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00731	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 94   : CMD_REG(a2, "<signal>", "assign analog signal to A2 outout")

  00736	68 00 00 00 00	 push	 OFFSET $SG142398
  0073b	68 00 00 00 00	 push	 OFFSET $SG142399
  00740	68 00 00 00 00	 push	 OFFSET ?cmd_a2@@YAXAAVCCmdLine@@@Z ; cmd_a2
  00745	68 00 00 00 00	 push	 OFFSET $SG142400
  0074a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0074f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 95   : CMD_REG(probeadc, "<signal>", "assign analog signal to ADC")

  00754	68 00 00 00 00	 push	 OFFSET $SG142401
  00759	68 00 00 00 00	 push	 OFFSET $SG142402
  0075e	68 00 00 00 00	 push	 OFFSET ?cmd_probeadc@@YAXAAVCCmdLine@@@Z ; cmd_probeadc
  00763	68 00 00 00 00	 push	 OFFSET $SG142403
  00768	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0076d	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 96   : CMD_REG(pgset, "<addr> <bits> <delay>", "set pattern generator entry")

  00772	68 00 00 00 00	 push	 OFFSET $SG142404
  00777	68 00 00 00 00	 push	 OFFSET $SG142405
  0077c	68 00 00 00 00	 push	 OFFSET ?cmd_pgset@@YAXAAVCCmdLine@@@Z ; cmd_pgset
  00781	68 00 00 00 00	 push	 OFFSET $SG142406
  00786	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0078b	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 97   : CMD_REG(pgstop, "", "stops pattern generator")

  00790	68 00 00 00 00	 push	 OFFSET $SG142407
  00795	68 00 00 00 00	 push	 OFFSET $SG142408
  0079a	68 00 00 00 00	 push	 OFFSET ?cmd_pgstop@@YAXAAVCCmdLine@@@Z ; cmd_pgstop
  0079f	68 00 00 00 00	 push	 OFFSET $SG142409
  007a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  007a9	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 98   : CMD_REG(pgsingle, "", "send single pattern")

  007ae	68 00 00 00 00	 push	 OFFSET $SG142410
  007b3	68 00 00 00 00	 push	 OFFSET $SG142411
  007b8	68 00 00 00 00	 push	 OFFSET ?cmd_pgsingle@@YAXAAVCCmdLine@@@Z ; cmd_pgsingle
  007bd	68 00 00 00 00	 push	 OFFSET $SG142412
  007c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  007c7	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 99   : CMD_REG(pgtrig, "", "enable external pattern trigger")

  007cc	68 00 00 00 00	 push	 OFFSET $SG142413
  007d1	68 00 00 00 00	 push	 OFFSET $SG142414
  007d6	68 00 00 00 00	 push	 OFFSET ?cmd_pgtrig@@YAXAAVCCmdLine@@@Z ; cmd_pgtrig
  007db	68 00 00 00 00	 push	 OFFSET $SG142415
  007e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  007e5	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 100  : CMD_REG(pgloop, "<period>", "start patterngenerator in loop mode")

  007ea	68 00 00 00 00	 push	 OFFSET $SG142416
  007ef	68 00 00 00 00	 push	 OFFSET $SG142417
  007f4	68 00 00 00 00	 push	 OFFSET ?cmd_pgloop@@YAXAAVCCmdLine@@@Z ; cmd_pgloop
  007f9	68 00 00 00 00	 push	 OFFSET $SG142418
  007fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00803	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 101  : 
; 102  : // === Trigger ==============================================================
; 103  : 
; 104  : HELP_CAT("trigger")

  00808	68 00 00 00 00	 push	 OFFSET $SG142419
  0080d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00812	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 105  : 
; 106  : CMD_REG(trgsel, "<bitmask>", "Select trigger source")

  00817	68 00 00 00 00	 push	 OFFSET $SG142420
  0081c	68 00 00 00 00	 push	 OFFSET $SG142421
  00821	68 00 00 00 00	 push	 OFFSET ?cmd_trgsel@@YAXAAVCCmdLine@@@Z ; cmd_trgsel
  00826	68 00 00 00 00	 push	 OFFSET $SG142422
  0082b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00830	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 107  : CMD_REG(trgdelay, "<delay>", "Set trigger delay in clock cycles")

  00835	68 00 00 00 00	 push	 OFFSET $SG142423
  0083a	68 00 00 00 00	 push	 OFFSET $SG142424
  0083f	68 00 00 00 00	 push	 OFFSET ?cmd_trgdelay@@YAXAAVCCmdLine@@@Z ; cmd_trgdelay
  00844	68 00 00 00 00	 push	 OFFSET $SG142425
  00849	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0084e	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 108  : CMD_REG(trgtimeout, "<timeout>", "Set max readout length")

  00853	68 00 00 00 00	 push	 OFFSET $SG142426
  00858	68 00 00 00 00	 push	 OFFSET $SG142427
  0085d	68 00 00 00 00	 push	 OFFSET ?cmd_trgtimeout@@YAXAAVCCmdLine@@@Z ; cmd_trgtimeout
  00862	68 00 00 00 00	 push	 OFFSET $SG142428
  00867	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0086c	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 109  : CMD_REG(trgper, "<period>", "Chose periodic trigger generator")

  00871	68 00 00 00 00	 push	 OFFSET $SG142429
  00876	68 00 00 00 00	 push	 OFFSET $SG142430
  0087b	68 00 00 00 00	 push	 OFFSET ?cmd_trgper@@YAXAAVCCmdLine@@@Z ; cmd_trgper
  00880	68 00 00 00 00	 push	 OFFSET $SG142431
  00885	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0088a	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 110  : CMD_REG(trgrand, "<rate>", "Chose random trigger generator")

  0088f	68 00 00 00 00	 push	 OFFSET $SG142432
  00894	68 00 00 00 00	 push	 OFFSET $SG142433
  00899	68 00 00 00 00	 push	 OFFSET ?cmd_trgrand@@YAXAAVCCmdLine@@@Z ; cmd_trgrand
  0089e	68 00 00 00 00	 push	 OFFSET $SG142434
  008a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  008a8	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 111  : CMD_REG(trgsend, "<bitmask>", "Send single trigger signal")

  008ad	68 00 00 00 00	 push	 OFFSET $SG142435
  008b2	68 00 00 00 00	 push	 OFFSET $SG142436
  008b7	68 00 00 00 00	 push	 OFFSET ?cmd_trgsend@@YAXAAVCCmdLine@@@Z ; cmd_trgsend
  008bc	68 00 00 00 00	 push	 OFFSET $SG142437
  008c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  008c6	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 112  : 
; 113  : // === DAQ ==================================================================
; 114  : 
; 115  : HELP_CAT("daq")

  008cb	68 00 00 00 00	 push	 OFFSET $SG142438
  008d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  008d5	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 116  : 
; 117  : CMD_REG(dopen, "<buffer size> [<ch>]", "Open DAQ and allocate memory")

  008da	68 00 00 00 00	 push	 OFFSET $SG142439
  008df	68 00 00 00 00	 push	 OFFSET $SG142440
  008e4	68 00 00 00 00	 push	 OFFSET ?cmd_dopen@@YAXAAVCCmdLine@@@Z ; cmd_dopen
  008e9	68 00 00 00 00	 push	 OFFSET $SG142441
  008ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  008f3	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 118  : CMD_REG(dclose, "[<channel>]", "Close DAQ")

  008f8	68 00 00 00 00	 push	 OFFSET $SG142442
  008fd	68 00 00 00 00	 push	 OFFSET $SG142443
  00902	68 00 00 00 00	 push	 OFFSET ?cmd_dclose@@YAXAAVCCmdLine@@@Z ; cmd_dclose
  00907	68 00 00 00 00	 push	 OFFSET $SG142444
  0090c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00911	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 119  : CMD_REG(dstart, "[<channel>]", "Enable DAQ")

  00916	68 00 00 00 00	 push	 OFFSET $SG142445
  0091b	68 00 00 00 00	 push	 OFFSET $SG142446
  00920	68 00 00 00 00	 push	 OFFSET ?cmd_dstart@@YAXAAVCCmdLine@@@Z ; cmd_dstart
  00925	68 00 00 00 00	 push	 OFFSET $SG142447
  0092a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0092f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 120  : CMD_REG(dstop, "[<channel>]", "Disable DAQ")

  00934	68 00 00 00 00	 push	 OFFSET $SG142448
  00939	68 00 00 00 00	 push	 OFFSET $SG142449
  0093e	68 00 00 00 00	 push	 OFFSET ?cmd_dstop@@YAXAAVCCmdLine@@@Z ; cmd_dstop
  00943	68 00 00 00 00	 push	 OFFSET $SG142450
  00948	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0094d	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 121  : CMD_REG(dsize, "[<channel>]", "Show DAQ buffer fill state")

  00952	68 00 00 00 00	 push	 OFFSET $SG142451
  00957	68 00 00 00 00	 push	 OFFSET $SG142452
  0095c	68 00 00 00 00	 push	 OFFSET ?cmd_dsize@@YAXAAVCCmdLine@@@Z ; cmd_dsize
  00961	68 00 00 00 00	 push	 OFFSET $SG142453
  00966	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0096b	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 122  : CMD_REG(dread, "[<channel>]", "Read Daq buffer and show as raw data")

  00970	68 00 00 00 00	 push	 OFFSET $SG142454
  00975	68 00 00 00 00	 push	 OFFSET $SG142455
  0097a	68 00 00 00 00	 push	 OFFSET ?cmd_dread@@YAXAAVCCmdLine@@@Z ; cmd_dread
  0097f	68 00 00 00 00	 push	 OFFSET $SG142456
  00984	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00989	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 123  : CMD_REG(dreadr, "[<channel>]", "Read Daq buffer and show as ROC data")

  0098e	68 00 00 00 00	 push	 OFFSET $SG142457
  00993	68 00 00 00 00	 push	 OFFSET $SG142458
  00998	68 00 00 00 00	 push	 OFFSET ?cmd_dreadr@@YAXAAVCCmdLine@@@Z ; cmd_dreadr
  0099d	68 00 00 00 00	 push	 OFFSET $SG142459
  009a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  009a7	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 124  : CMD_REG(dreadm, "[<channel>]", "Read Daq buffer and show as module data")

  009ac	68 00 00 00 00	 push	 OFFSET $SG142460
  009b1	68 00 00 00 00	 push	 OFFSET $SG142461
  009b6	68 00 00 00 00	 push	 OFFSET ?cmd_dreadm@@YAXAAVCCmdLine@@@Z ; cmd_dreadm
  009bb	68 00 00 00 00	 push	 OFFSET $SG142462
  009c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  009c5	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 125  : CMD_REG(dreada, "[<channel>]", "Read Daq buffer and show as raw data")

  009ca	68 00 00 00 00	 push	 OFFSET $SG142463
  009cf	68 00 00 00 00	 push	 OFFSET $SG142464
  009d4	68 00 00 00 00	 push	 OFFSET ?cmd_dreada@@YAXAAVCCmdLine@@@Z ; cmd_dreada
  009d9	68 00 00 00 00	 push	 OFFSET $SG142465
  009de	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  009e3	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 126  : CMD_REG(dselmod, "", "select deser400 for DAQ channel 0");

  009e8	68 00 00 00 00	 push	 OFFSET $SG142466
  009ed	68 00 00 00 00	 push	 OFFSET $SG142467
  009f2	68 00 00 00 00	 push	 OFFSET ?cmd_dselmod@@YAXAAVCCmdLine@@@Z ; cmd_dselmod
  009f7	68 00 00 00 00	 push	 OFFSET $SG142468
  009fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00a01	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 127  : CMD_REG(dmodres, "", "reset all deser400");

  00a06	68 00 00 00 00	 push	 OFFSET $SG142469
  00a0b	68 00 00 00 00	 push	 OFFSET $SG142470
  00a10	68 00 00 00 00	 push	 OFFSET ?cmd_dmodres@@YAXAAVCCmdLine@@@Z ; cmd_dmodres
  00a15	68 00 00 00 00	 push	 OFFSET $SG142471
  00a1a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00a1f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 128  : CMD_REG(dselroc, "<value>", "select deser160 for DAQ channel 0");

  00a24	68 00 00 00 00	 push	 OFFSET $SG142472
  00a29	68 00 00 00 00	 push	 OFFSET $SG142473
  00a2e	68 00 00 00 00	 push	 OFFSET ?cmd_dselroc@@YAXAAVCCmdLine@@@Z ; cmd_dselroc
  00a33	68 00 00 00 00	 push	 OFFSET $SG142474
  00a38	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00a3d	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 129  : CMD_REG(dselroca, "<value>", "select adc for channel 0");

  00a42	68 00 00 00 00	 push	 OFFSET $SG142475
  00a47	68 00 00 00 00	 push	 OFFSET $SG142476
  00a4c	68 00 00 00 00	 push	 OFFSET ?cmd_dselroca@@YAXAAVCCmdLine@@@Z ; cmd_dselroca
  00a51	68 00 00 00 00	 push	 OFFSET $SG142477
  00a56	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00a5b	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 130  : CMD_REG(dselsim, "<startvalue>", "select data generator for channel 0");

  00a60	68 00 00 00 00	 push	 OFFSET $SG142478
  00a65	68 00 00 00 00	 push	 OFFSET $SG142479
  00a6a	68 00 00 00 00	 push	 OFFSET ?cmd_dselsim@@YAXAAVCCmdLine@@@Z ; cmd_dselsim
  00a6f	68 00 00 00 00	 push	 OFFSET $SG142480
  00a74	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00a79	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 131  : CMD_REG(dseloff, "", "deselect all");

  00a7e	68 00 00 00 00	 push	 OFFSET $SG142481
  00a83	68 00 00 00 00	 push	 OFFSET $SG142482
  00a88	68 00 00 00 00	 push	 OFFSET ?cmd_dseloff@@YAXAAVCCmdLine@@@Z ; cmd_dseloff
  00a8d	68 00 00 00 00	 push	 OFFSET $SG142483
  00a92	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00a97	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 132  : 
; 133  : // === DESER400 ==========================================================
; 134  : 
; 135  : HELP_CAT("deser400")

  00a9c	68 00 00 00 00	 push	 OFFSET $SG142484
  00aa1	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00aa6	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 136  : 
; 137  : CMD_REG(dsena, "<deser>", "Enable deser 0..3")

  00aab	68 00 00 00 00	 push	 OFFSET $SG142485
  00ab0	68 00 00 00 00	 push	 OFFSET $SG142486
  00ab5	68 00 00 00 00	 push	 OFFSET ?cmd_dsena@@YAXAAVCCmdLine@@@Z ; cmd_dsena
  00aba	68 00 00 00 00	 push	 OFFSET $SG142487
  00abf	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00ac4	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 138  : CMD_REG(dsdis, "<deser>", "Disable deser 0..3")

  00ac9	68 00 00 00 00	 push	 OFFSET $SG142488
  00ace	68 00 00 00 00	 push	 OFFSET $SG142489
  00ad3	68 00 00 00 00	 push	 OFFSET ?cmd_dsdis@@YAXAAVCCmdLine@@@Z ; cmd_dsdis
  00ad8	68 00 00 00 00	 push	 OFFSET $SG142490
  00add	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00ae2	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 139  : CMD_REG(dsdisall, "", "Disable all deser")

  00ae7	68 00 00 00 00	 push	 OFFSET $SG142491
  00aec	68 00 00 00 00	 push	 OFFSET $SG142492
  00af1	68 00 00 00 00	 push	 OFFSET ?cmd_dsdisall@@YAXAAVCCmdLine@@@Z ; cmd_dsdisall
  00af6	68 00 00 00 00	 push	 OFFSET $SG142493
  00afb	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00b00	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 140  : CMD_REG(dssetph, "<deser> <phase>", "Switch deser in manual mode and set fixed phase")

  00b05	68 00 00 00 00	 push	 OFFSET $SG142494
  00b0a	68 00 00 00 00	 push	 OFFSET $SG142495
  00b0f	68 00 00 00 00	 push	 OFFSET ?cmd_dssetph@@YAXAAVCCmdLine@@@Z ; cmd_dssetph
  00b14	68 00 00 00 00	 push	 OFFSET $SG142496
  00b19	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00b1e	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 141  : CMD_REG(dsauto, "<deser>", "Switch deser in auto phase mode")

  00b23	68 00 00 00 00	 push	 OFFSET $SG142497
  00b28	68 00 00 00 00	 push	 OFFSET $SG142498
  00b2d	68 00 00 00 00	 push	 OFFSET ?cmd_dsauto@@YAXAAVCCmdLine@@@Z ; cmd_dsauto
  00b32	68 00 00 00 00	 push	 OFFSET $SG142499
  00b37	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00b3c	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 142  : CMD_REG(dsautoall, "", "Switch all deser in auto phase mode")

  00b41	68 00 00 00 00	 push	 OFFSET $SG142500
  00b46	68 00 00 00 00	 push	 OFFSET $SG142501
  00b4b	68 00 00 00 00	 push	 OFFSET ?cmd_dsautoall@@YAXAAVCCmdLine@@@Z ; cmd_dsautoall
  00b50	68 00 00 00 00	 push	 OFFSET $SG142502
  00b55	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00b5a	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 143  : CMD_REG(dsgetxor, "<deser>", "Read deser xor sum")

  00b5f	68 00 00 00 00	 push	 OFFSET $SG142503
  00b64	68 00 00 00 00	 push	 OFFSET $SG142504
  00b69	68 00 00 00 00	 push	 OFFSET ?cmd_dsgetxor@@YAXAAVCCmdLine@@@Z ; cmd_dsgetxor
  00b6e	68 00 00 00 00	 push	 OFFSET $SG142505
  00b73	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00b78	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 144  : CMD_REG(dsgetph, "<deser>", "Read deser phase")

  00b7d	68 00 00 00 00	 push	 OFFSET $SG142506
  00b82	68 00 00 00 00	 push	 OFFSET $SG142507
  00b87	68 00 00 00 00	 push	 OFFSET ?cmd_dsgetph@@YAXAAVCCmdLine@@@Z ; cmd_dsgetph
  00b8c	68 00 00 00 00	 push	 OFFSET $SG142508
  00b91	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00b96	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 145  : CMD_REG(gaterun, "<width> <periode>", "Switch gate in running mode")

  00b9b	68 00 00 00 00	 push	 OFFSET $SG142509
  00ba0	68 00 00 00 00	 push	 OFFSET $SG142510
  00ba5	68 00 00 00 00	 push	 OFFSET ?cmd_gaterun@@YAXAAVCCmdLine@@@Z ; cmd_gaterun
  00baa	68 00 00 00 00	 push	 OFFSET $SG142511
  00baf	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00bb4	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 146  : CMD_REG(gatesingle, "<width>", "Stop gate running mode and start single pulse")

  00bb9	68 00 00 00 00	 push	 OFFSET $SG142512
  00bbe	68 00 00 00 00	 push	 OFFSET $SG142513
  00bc3	68 00 00 00 00	 push	 OFFSET ?cmd_gatesingle@@YAXAAVCCmdLine@@@Z ; cmd_gatesingle
  00bc8	68 00 00 00 00	 push	 OFFSET $SG142514
  00bcd	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00bd2	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 147  : CMD_REG(gatestop, "", "Stop gate running mode")

  00bd7	68 00 00 00 00	 push	 OFFSET $SG142515
  00bdc	68 00 00 00 00	 push	 OFFSET $SG142516
  00be1	68 00 00 00 00	 push	 OFFSET ?cmd_gatestop@@YAXAAVCCmdLine@@@Z ; cmd_gatestop
  00be6	68 00 00 00 00	 push	 OFFSET $SG142517
  00beb	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00bf0	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 148  : 
; 149  : 
; 150  : // =======================================================================
; 151  : //  tbm commands
; 152  : // =======================================================================
; 153  : 
; 154  : CMD_REG(tbmdis, "", "disable TBM")

  00bf5	68 00 00 00 00	 push	 OFFSET $SG142518
  00bfa	68 00 00 00 00	 push	 OFFSET $SG142519
  00bff	68 00 00 00 00	 push	 OFFSET ?cmd_tbmdis@@YAXAAVCCmdLine@@@Z ; cmd_tbmdis
  00c04	68 00 00 00 00	 push	 OFFSET $SG142520
  00c09	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00c0e	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 155  : CMD_REG(tbmsel, "<hub> <port>", "set hub and port address")

  00c13	68 00 00 00 00	 push	 OFFSET $SG142521
  00c18	68 00 00 00 00	 push	 OFFSET $SG142522
  00c1d	68 00 00 00 00	 push	 OFFSET ?cmd_tbmsel@@YAXAAVCCmdLine@@@Z ; cmd_tbmsel
  00c22	68 00 00 00 00	 push	 OFFSET $SG142523
  00c27	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00c2c	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 156  : CMD_REG(modsel, "<hub>", "set hub address for module")

  00c31	68 00 00 00 00	 push	 OFFSET $SG142524
  00c36	68 00 00 00 00	 push	 OFFSET $SG142525
  00c3b	68 00 00 00 00	 push	 OFFSET ?cmd_modsel@@YAXAAVCCmdLine@@@Z ; cmd_modsel
  00c40	68 00 00 00 00	 push	 OFFSET $SG142526
  00c45	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00c4a	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 157  : CMD_REG(tbmset, "<reg> <value>", "set TBM register")

  00c4f	68 00 00 00 00	 push	 OFFSET $SG142527
  00c54	68 00 00 00 00	 push	 OFFSET $SG142528
  00c59	68 00 00 00 00	 push	 OFFSET ?cmd_tbmset@@YAXAAVCCmdLine@@@Z ; cmd_tbmset
  00c5e	68 00 00 00 00	 push	 OFFSET $SG142529
  00c63	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00c68	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 158  : 
; 159  : 
; 160  : CMD_REG(tbmget, "", "")

  00c6d	68 00 00 00 00	 push	 OFFSET $SG142530
  00c72	68 00 00 00 00	 push	 OFFSET $SG142531
  00c77	68 00 00 00 00	 push	 OFFSET ?cmd_tbmget@@YAXAAVCCmdLine@@@Z ; cmd_tbmget
  00c7c	68 00 00 00 00	 push	 OFFSET $SG142532
  00c81	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00c86	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 161  : CMD_REG(tbmgetraw, "", "")

  00c8b	68 00 00 00 00	 push	 OFFSET $SG142533
  00c90	68 00 00 00 00	 push	 OFFSET $SG142534
  00c95	68 00 00 00 00	 push	 OFFSET ?cmd_tbmgetraw@@YAXAAVCCmdLine@@@Z ; cmd_tbmgetraw
  00c9a	68 00 00 00 00	 push	 OFFSET $SG142535
  00c9f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00ca4	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 162  : // CMD_REG(tbmregs, "", "")
; 163  : // CMD_REG(modscan, "", "")
; 164  : 
; 165  : 
; 166  : HELP_CAT("roc")

  00ca9	68 00 00 00 00	 push	 OFFSET $SG142536
  00cae	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00cb3	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 167  : 
; 168  : CMD_REG(select, "<addr range>", "set i2c address")

  00cb8	68 00 00 00 00	 push	 OFFSET $SG142537
  00cbd	68 00 00 00 00	 push	 OFFSET $SG142538
  00cc2	68 00 00 00 00	 push	 OFFSET ?cmd_select@@YAXAAVCCmdLine@@@Z ; cmd_select
  00cc7	68 00 00 00 00	 push	 OFFSET $SG142539
  00ccc	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00cd1	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 169  : CMD_REG(dac, "<address> <value>", "set DAC")

  00cd6	68 00 00 00 00	 push	 OFFSET $SG142540
  00cdb	68 00 00 00 00	 push	 OFFSET $SG142541
  00ce0	68 00 00 00 00	 push	 OFFSET ?cmd_dac@@YAXAAVCCmdLine@@@Z ; cmd_dac
  00ce5	68 00 00 00 00	 push	 OFFSET $SG142542
  00cea	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00cef	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 170  : CMD_REG(vdig, "<value>", "set Vdig")

  00cf4	68 00 00 00 00	 push	 OFFSET $SG142543
  00cf9	68 00 00 00 00	 push	 OFFSET $SG142544
  00cfe	68 00 00 00 00	 push	 OFFSET ?cmd_vdig@@YAXAAVCCmdLine@@@Z ; cmd_vdig
  00d03	68 00 00 00 00	 push	 OFFSET $SG142545
  00d08	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00d0d	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 171  : CMD_REG(vana, "<value>", "set Vana")

  00d12	68 00 00 00 00	 push	 OFFSET $SG142546
  00d17	68 00 00 00 00	 push	 OFFSET $SG142547
  00d1c	68 00 00 00 00	 push	 OFFSET ?cmd_vana@@YAXAAVCCmdLine@@@Z ; cmd_vana
  00d21	68 00 00 00 00	 push	 OFFSET $SG142548
  00d26	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00d2b	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 172  : CMD_REG(vtrim, "<value>", "set Vtrim")

  00d30	68 00 00 00 00	 push	 OFFSET $SG142549
  00d35	68 00 00 00 00	 push	 OFFSET $SG142550
  00d3a	68 00 00 00 00	 push	 OFFSET ?cmd_vtrim@@YAXAAVCCmdLine@@@Z ; cmd_vtrim
  00d3f	68 00 00 00 00	 push	 OFFSET $SG142551
  00d44	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00d49	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 173  : CMD_REG(vthr, "<value>", "set VthrComp")

  00d4e	68 00 00 00 00	 push	 OFFSET $SG142552
  00d53	68 00 00 00 00	 push	 OFFSET $SG142553
  00d58	68 00 00 00 00	 push	 OFFSET ?cmd_vthr@@YAXAAVCCmdLine@@@Z ; cmd_vthr
  00d5d	68 00 00 00 00	 push	 OFFSET $SG142554
  00d62	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00d67	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 174  : CMD_REG(vcal, "<value>", "set Vcal")

  00d6c	68 00 00 00 00	 push	 OFFSET $SG142555
  00d71	68 00 00 00 00	 push	 OFFSET $SG142556
  00d76	68 00 00 00 00	 push	 OFFSET ?cmd_vcal@@YAXAAVCCmdLine@@@Z ; cmd_vcal
  00d7b	68 00 00 00 00	 push	 OFFSET $SG142557
  00d80	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00d85	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 175  : CMD_REG(caldel, "<value>", "set cal delay")

  00d8a	68 00 00 00 00	 push	 OFFSET $SG142558
  00d8f	68 00 00 00 00	 push	 OFFSET $SG142559
  00d94	68 00 00 00 00	 push	 OFFSET ?cmd_caldel@@YAXAAVCCmdLine@@@Z ; cmd_caldel
  00d99	68 00 00 00 00	 push	 OFFSET $SG142560
  00d9e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00da3	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 176  : CMD_REG(adcref, "<value>", "ADC reference")

  00da8	68 00 00 00 00	 push	 OFFSET $SG142561
  00dad	68 00 00 00 00	 push	 OFFSET $SG142562
  00db2	68 00 00 00 00	 push	 OFFSET ?cmd_adcref@@YAXAAVCCmdLine@@@Z ; cmd_adcref
  00db7	68 00 00 00 00	 push	 OFFSET $SG142563
  00dbc	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00dc1	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 177  : CMD_REG(adcoffset, "<value>", "ADC offset")

  00dc6	68 00 00 00 00	 push	 OFFSET $SG142564
  00dcb	68 00 00 00 00	 push	 OFFSET $SG142565
  00dd0	68 00 00 00 00	 push	 OFFSET ?cmd_adcoffset@@YAXAAVCCmdLine@@@Z ; cmd_adcoffset
  00dd5	68 00 00 00 00	 push	 OFFSET $SG142566
  00dda	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00ddf	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 178  : CMD_REG(wbc, "<value>", "set WBC")

  00de4	68 00 00 00 00	 push	 OFFSET $SG142567
  00de9	68 00 00 00 00	 push	 OFFSET $SG142568
  00dee	68 00 00 00 00	 push	 OFFSET ?cmd_wbc@@YAXAAVCCmdLine@@@Z ; cmd_wbc
  00df3	68 00 00 00 00	 push	 OFFSET $SG142569
  00df8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00dfd	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 179  : CMD_REG(ctl, "<value>", "set control register")

  00e02	68 00 00 00 00	 push	 OFFSET $SG142570
  00e07	68 00 00 00 00	 push	 OFFSET $SG142571
  00e0c	68 00 00 00 00	 push	 OFFSET ?cmd_ctl@@YAXAAVCCmdLine@@@Z ; cmd_ctl
  00e11	68 00 00 00 00	 push	 OFFSET $SG142572
  00e16	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00e1b	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 180  : CMD_REG(cole, "<range>", "enable column")

  00e20	68 00 00 00 00	 push	 OFFSET $SG142573
  00e25	68 00 00 00 00	 push	 OFFSET $SG142574
  00e2a	68 00 00 00 00	 push	 OFFSET ?cmd_cole@@YAXAAVCCmdLine@@@Z ; cmd_cole
  00e2f	68 00 00 00 00	 push	 OFFSET $SG142575
  00e34	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00e39	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 181  : CMD_REG(cold, "<range>", "disable columns")

  00e3e	68 00 00 00 00	 push	 OFFSET $SG142576
  00e43	68 00 00 00 00	 push	 OFFSET $SG142577
  00e48	68 00 00 00 00	 push	 OFFSET ?cmd_cold@@YAXAAVCCmdLine@@@Z ; cmd_cold
  00e4d	68 00 00 00 00	 push	 OFFSET $SG142578
  00e52	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00e57	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 182  : CMD_REG(pixe, "<range> <range> <value>", "trim pixel")

  00e5c	68 00 00 00 00	 push	 OFFSET $SG142579
  00e61	68 00 00 00 00	 push	 OFFSET $SG142580
  00e66	68 00 00 00 00	 push	 OFFSET ?cmd_pixe@@YAXAAVCCmdLine@@@Z ; cmd_pixe
  00e6b	68 00 00 00 00	 push	 OFFSET $SG142581
  00e70	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00e75	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 183  : CMD_REG(pixd, "<range> <range>", "kill pixel")

  00e7a	68 00 00 00 00	 push	 OFFSET $SG142582
  00e7f	68 00 00 00 00	 push	 OFFSET $SG142583
  00e84	68 00 00 00 00	 push	 OFFSET ?cmd_pixd@@YAXAAVCCmdLine@@@Z ; cmd_pixd
  00e89	68 00 00 00 00	 push	 OFFSET $SG142584
  00e8e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00e93	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 184  : CMD_REG(cal, "<range> <range>", "calibrate pixel")

  00e98	68 00 00 00 00	 push	 OFFSET $SG142585
  00e9d	68 00 00 00 00	 push	 OFFSET $SG142586
  00ea2	68 00 00 00 00	 push	 OFFSET ?cmd_cal@@YAXAAVCCmdLine@@@Z ; cmd_cal
  00ea7	68 00 00 00 00	 push	 OFFSET $SG142587
  00eac	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00eb1	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 185  : CMD_REG(cals, "<range> <range>", "sensor calibrate pixel")

  00eb6	68 00 00 00 00	 push	 OFFSET $SG142588
  00ebb	68 00 00 00 00	 push	 OFFSET $SG142589
  00ec0	68 00 00 00 00	 push	 OFFSET ?cmd_cals@@YAXAAVCCmdLine@@@Z ; cmd_cals
  00ec5	68 00 00 00 00	 push	 OFFSET $SG142590
  00eca	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00ecf	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 186  : CMD_REG(cald, "", "clear calibrate")

  00ed4	68 00 00 00 00	 push	 OFFSET $SG142591
  00ed9	68 00 00 00 00	 push	 OFFSET $SG142592
  00ede	68 00 00 00 00	 push	 OFFSET ?cmd_cald@@YAXAAVCCmdLine@@@Z ; cmd_cald
  00ee3	68 00 00 00 00	 push	 OFFSET $SG142593
  00ee8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00eed	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 187  : CMD_REG(mask, "", "mask all pixel and cols")

  00ef2	68 00 00 00 00	 push	 OFFSET $SG142594
  00ef7	68 00 00 00 00	 push	 OFFSET $SG142595
  00efc	68 00 00 00 00	 push	 OFFSET ?cmd_mask@@YAXAAVCCmdLine@@@Z ; cmd_mask
  00f01	68 00 00 00 00	 push	 OFFSET $SG142596
  00f06	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00f0b	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 188  : 
; 189  : 
; 190  : // =======================================================================
; 191  : //  Temperature commands
; 192  : // =======================================================================
; 193  : CMD_REG(gettemp, "", "Read RTD on the HDI")

  00f10	68 00 00 00 00	 push	 OFFSET $SG142597
  00f15	68 00 00 00 00	 push	 OFFSET $SG142598
  00f1a	68 00 00 00 00	 push	 OFFSET ?cmd_gettemp@@YAXAAVCCmdLine@@@Z ; cmd_gettemp
  00f1f	68 00 00 00 00	 push	 OFFSET $SG142599
  00f24	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00f29	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd_wafertest.h

; 20   : HELP_CAT("test")

  00f2e	68 00 00 00 00	 push	 OFFSET $SG142600
  00f33	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00f38	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 21   : CMD_REG(roctype, "ana|dig", "choose ROC type for test")

  00f3d	68 00 00 00 00	 push	 OFFSET $SG142601
  00f42	68 00 00 00 00	 push	 OFFSET $SG142602
  00f47	68 00 00 00 00	 push	 OFFSET ?cmd_roctype@@YAXAAVCCmdLine@@@Z ; cmd_roctype
  00f4c	68 00 00 00 00	 push	 OFFSET $SG142603
  00f51	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00f56	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 22   : CMD_REG(pr, "<command>", "send command to prober")

  00f5b	68 00 00 00 00	 push	 OFFSET $SG142604
  00f60	68 00 00 00 00	 push	 OFFSET $SG142605
  00f65	68 00 00 00 00	 push	 OFFSET ?cmd_pr@@YAXAAVCCmdLine@@@Z ; cmd_pr
  00f6a	68 00 00 00 00	 push	 OFFSET $SG142606
  00f6f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00f74	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 23   : CMD_REG(sep, "", "prober z-axis separation")

  00f79	68 00 00 00 00	 push	 OFFSET $SG142607
  00f7e	68 00 00 00 00	 push	 OFFSET $SG142608
  00f83	68 00 00 00 00	 push	 OFFSET ?cmd_sep@@YAXAAVCCmdLine@@@Z ; cmd_sep
  00f88	68 00 00 00 00	 push	 OFFSET $SG142609
  00f8d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00f92	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 24   : CMD_REG(contact, "", "prober z-axis contact")

  00f97	68 00 00 00 00	 push	 OFFSET $SG142610
  00f9c	68 00 00 00 00	 push	 OFFSET $SG142611
  00fa1	68 00 00 00 00	 push	 OFFSET ?cmd_contact@@YAXAAVCCmdLine@@@Z ; cmd_contact
  00fa6	68 00 00 00 00	 push	 OFFSET $SG142612
  00fab	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00fb0	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 25   : CMD_REG(test, "<chip id>", "run chip test")

  00fb5	68 00 00 00 00	 push	 OFFSET $SG142613
  00fba	68 00 00 00 00	 push	 OFFSET $SG142614
  00fbf	68 00 00 00 00	 push	 OFFSET ?cmd_test@@YAXAAVCCmdLine@@@Z ; cmd_test
  00fc4	68 00 00 00 00	 push	 OFFSET $SG142615
  00fc9	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00fce	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 26   : CMD_REG(chippos, "<ABCD>", "move to chip A, B, C or D")

  00fd3	68 00 00 00 00	 push	 OFFSET $SG142616
  00fd8	68 00 00 00 00	 push	 OFFSET $SG142617
  00fdd	68 00 00 00 00	 push	 OFFSET ?cmd_chippos@@YAXAAVCCmdLine@@@Z ; cmd_chippos
  00fe2	68 00 00 00 00	 push	 OFFSET $SG142618
  00fe7	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  00fec	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 27   : CMD_REG(go, "init|cont", "start wafer test (press <cr> to stop)")

  00ff1	68 00 00 00 00	 push	 OFFSET $SG142619
  00ff6	68 00 00 00 00	 push	 OFFSET $SG142620
  00ffb	68 00 00 00 00	 push	 OFFSET ?cmd_go@@YAXAAVCCmdLine@@@Z ; cmd_go
  01000	68 00 00 00 00	 push	 OFFSET $SG142621
  01005	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0100a	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 28   : CMD_REG(first, "", "go to first die and clear wafer map")

  0100f	68 00 00 00 00	 push	 OFFSET $SG142622
  01014	68 00 00 00 00	 push	 OFFSET $SG142623
  01019	68 00 00 00 00	 push	 OFFSET ?cmd_first@@YAXAAVCCmdLine@@@Z ; cmd_first
  0101e	68 00 00 00 00	 push	 OFFSET $SG142624
  01023	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01028	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 29   : CMD_REG(next, "", "go to next die")

  0102d	68 00 00 00 00	 push	 OFFSET $SG142625
  01032	68 00 00 00 00	 push	 OFFSET $SG142626
  01037	68 00 00 00 00	 push	 OFFSET ?cmd_next@@YAXAAVCCmdLine@@@Z ; cmd_next
  0103c	68 00 00 00 00	 push	 OFFSET $SG142627
  01041	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01046	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 30   : CMD_REG(goto, "", "go to specified die")

  0104b	68 00 00 00 00	 push	 OFFSET $SG142628
  01050	68 00 00 00 00	 push	 OFFSET $SG142629
  01055	68 00 00 00 00	 push	 OFFSET ?cmd_goto@@YAXAAVCCmdLine@@@Z ; cmd_goto
  0105a	68 00 00 00 00	 push	 OFFSET $SG142630
  0105f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01064	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd_analyzer.h

; 17   : HELP_CAT("ext")

  01069	68 00 00 00 00	 push	 OFFSET $SG142631
  0106e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01073	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 18   : 
; 19   : CMD_REG(showclk, "", "")

  01078	68 00 00 00 00	 push	 OFFSET $SG142632
  0107d	68 00 00 00 00	 push	 OFFSET $SG142633
  01082	68 00 00 00 00	 push	 OFFSET ?cmd_showclk@@YAXAAVCCmdLine@@@Z ; cmd_showclk
  01087	68 00 00 00 00	 push	 OFFSET $SG142634
  0108c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01091	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 20   : CMD_REG(showctr, "", "")

  01096	68 00 00 00 00	 push	 OFFSET $SG142635
  0109b	68 00 00 00 00	 push	 OFFSET $SG142636
  010a0	68 00 00 00 00	 push	 OFFSET ?cmd_showctr@@YAXAAVCCmdLine@@@Z ; cmd_showctr
  010a5	68 00 00 00 00	 push	 OFFSET $SG142637
  010aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  010af	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 21   : CMD_REG(showsda, "", "")

  010b4	68 00 00 00 00	 push	 OFFSET $SG142638
  010b9	68 00 00 00 00	 push	 OFFSET $SG142639
  010be	68 00 00 00 00	 push	 OFFSET ?cmd_showsda@@YAXAAVCCmdLine@@@Z ; cmd_showsda
  010c3	68 00 00 00 00	 push	 OFFSET $SG142640
  010c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  010cd	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 22   : CMD_REG(decoding, "", "")

  010d2	68 00 00 00 00	 push	 OFFSET $SG142641
  010d7	68 00 00 00 00	 push	 OFFSET $SG142642
  010dc	68 00 00 00 00	 push	 OFFSET ?cmd_decoding@@YAXAAVCCmdLine@@@Z ; cmd_decoding
  010e1	68 00 00 00 00	 push	 OFFSET $SG142643
  010e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  010eb	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 23   : 
; 24   : CMD_REG(showrocdata, "", "")

  010f0	68 00 00 00 00	 push	 OFFSET $SG142644
  010f5	68 00 00 00 00	 push	 OFFSET $SG142645
  010fa	68 00 00 00 00	 push	 OFFSET ?cmd_showrocdata@@YAXAAVCCmdLine@@@Z ; cmd_showrocdata
  010ff	68 00 00 00 00	 push	 OFFSET $SG142646
  01104	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01109	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 25   : 
; 26   : // =======================================================================
; 27   : //  experimential ROC test commands
; 28   : // =======================================================================
; 29   : 
; 30   : CMD_REG(vectortest, "<length>", "send/receive a vector")

  0110e	68 00 00 00 00	 push	 OFFSET $SG142647
  01113	68 00 00 00 00	 push	 OFFSET $SG142648
  01118	68 00 00 00 00	 push	 OFFSET ?cmd_vectortest@@YAXAAVCCmdLine@@@Z ; cmd_vectortest
  0111d	68 00 00 00 00	 push	 OFFSET $SG142649
  01122	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01127	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 31   : CMD_REG(daqtest, "", "test DAQ read function")

  0112c	68 00 00 00 00	 push	 OFFSET $SG142650
  01131	68 00 00 00 00	 push	 OFFSET $SG142651
  01136	68 00 00 00 00	 push	 OFFSET ?cmd_daqtest@@YAXAAVCCmdLine@@@Z ; cmd_daqtest
  0113b	68 00 00 00 00	 push	 OFFSET $SG142652
  01140	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01145	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 32   : CMD_REG(daqtest2, "", "test DAQ read function in continous mode")

  0114a	68 00 00 00 00	 push	 OFFSET $SG142653
  0114f	68 00 00 00 00	 push	 OFFSET $SG142654
  01154	68 00 00 00 00	 push	 OFFSET ?cmd_daqtest2@@YAXAAVCCmdLine@@@Z ; cmd_daqtest2
  01159	68 00 00 00 00	 push	 OFFSET $SG142655
  0115e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01163	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 33   : CMD_REG(daqerrorcheckm, "<channel> <period>", "read data from module and list errors")

  01168	68 00 00 00 00	 push	 OFFSET $SG142656
  0116d	68 00 00 00 00	 push	 OFFSET $SG142657
  01172	68 00 00 00 00	 push	 OFFSET ?cmd_daqerrorcheckm@@YAXAAVCCmdLine@@@Z ; cmd_daqerrorcheckm
  01177	68 00 00 00 00	 push	 OFFSET $SG142658
  0117c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01181	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 34   : CMD_REG(desergatescan, "", "xor for different gate length")

  01186	68 00 00 00 00	 push	 OFFSET $SG142659
  0118b	68 00 00 00 00	 push	 OFFSET $SG142660
  01190	68 00 00 00 00	 push	 OFFSET ?cmd_desergatescan@@YAXAAVCCmdLine@@@Z ; cmd_desergatescan
  01195	68 00 00 00 00	 push	 OFFSET $SG142661
  0119a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0119f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 35   : CMD_REG(daqreadm, "<channel> <period>", "read, decode and list continous data stream from module with trig gen")

  011a4	68 00 00 00 00	 push	 OFFSET $SG142662
  011a9	68 00 00 00 00	 push	 OFFSET $SG142663
  011ae	68 00 00 00 00	 push	 OFFSET ?cmd_daqreadm@@YAXAAVCCmdLine@@@Z ; cmd_daqreadm
  011b3	68 00 00 00 00	 push	 OFFSET $SG142664
  011b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  011bd	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 36   : CMD_REG(daqreadt, "<period>", "read, decode and list continous data stream from roc with trig gen")

  011c2	68 00 00 00 00	 push	 OFFSET $SG142665
  011c7	68 00 00 00 00	 push	 OFFSET $SG142666
  011cc	68 00 00 00 00	 push	 OFFSET ?cmd_daqreadt@@YAXAAVCCmdLine@@@Z ; cmd_daqreadt
  011d1	68 00 00 00 00	 push	 OFFSET $SG142667
  011d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  011db	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 37   : CMD_REG(analyze, "", "test analyzer chain")

  011e0	68 00 00 00 00	 push	 OFFSET $SG142668
  011e5	68 00 00 00 00	 push	 OFFSET $SG142669
  011ea	68 00 00 00 00	 push	 OFFSET ?cmd_analyze@@YAXAAVCCmdLine@@@Z ; cmd_analyze
  011ef	68 00 00 00 00	 push	 OFFSET $SG142670
  011f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  011f9	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 38   : CMD_REG(ethsend, "<string>", "send <string> in a Ethernet packet")

  011fe	68 00 00 00 00	 push	 OFFSET $SG142671
  01203	68 00 00 00 00	 push	 OFFSET $SG142672
  01208	68 00 00 00 00	 push	 OFFSET ?cmd_ethsend@@YAXAAVCCmdLine@@@Z ; cmd_ethsend
  0120d	68 00 00 00 00	 push	 OFFSET $SG142673
  01212	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01217	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 39   : CMD_REG(ethrx, "", "shows number of received packets")

  0121c	68 00 00 00 00	 push	 OFFSET $SG142674
  01221	68 00 00 00 00	 push	 OFFSET $SG142675
  01226	68 00 00 00 00	 push	 OFFSET ?cmd_ethrx@@YAXAAVCCmdLine@@@Z ; cmd_ethrx
  0122b	68 00 00 00 00	 push	 OFFSET $SG142676
  01230	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01235	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 40   : CMD_REG(shmoo, "", "shmoo vx xrange vy ymin yrange")

  0123a	68 00 00 00 00	 push	 OFFSET $SG142677
  0123f	68 00 00 00 00	 push	 OFFSET $SG142678
  01244	68 00 00 00 00	 push	 OFFSET ?cmd_shmoo@@YAXAAVCCmdLine@@@Z ; cmd_shmoo
  01249	68 00 00 00 00	 push	 OFFSET $SG142679
  0124e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01253	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 41   : CMD_REG(deser160, "", "align deser160")

  01258	68 00 00 00 00	 push	 OFFSET $SG142680
  0125d	68 00 00 00 00	 push	 OFFSET $SG142681
  01262	68 00 00 00 00	 push	 OFFSET ?cmd_deser160@@YAXAAVCCmdLine@@@Z ; cmd_deser160
  01267	68 00 00 00 00	 push	 OFFSET $SG142682
  0126c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01271	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 42   : // CMD_REG(readback, "", "")
; 43   : CMD_REG(phscan, "<x> <y> <cal range>", "pulse height scan")

  01276	68 00 00 00 00	 push	 OFFSET $SG142683
  0127b	68 00 00 00 00	 push	 OFFSET $SG142684
  01280	68 00 00 00 00	 push	 OFFSET ?cmd_phscan@@YAXAAVCCmdLine@@@Z ; cmd_phscan
  01285	68 00 00 00 00	 push	 OFFSET $SG142685
  0128a	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0128f	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 44   : 
; 45   : 
; 46   : // === DROC600 test ======================================================
; 47   : HELP_CAT("droc600")

  01294	68 00 00 00 00	 push	 OFFSET $SG142686
  01299	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0129e	e8 00 00 00 00	 call	 ?AddHelpCategory@CInterpreter@@QAEXQBD@Z ; CInterpreter::AddHelpCategory

; 48   : CMD_REG(scanaddr, "", "address scan")

  012a3	68 00 00 00 00	 push	 OFFSET $SG142687
  012a8	68 00 00 00 00	 push	 OFFSET $SG142688
  012ad	68 00 00 00 00	 push	 OFFSET ?cmd_scanaddr@@YAXAAVCCmdLine@@@Z ; cmd_scanaddr
  012b2	68 00 00 00 00	 push	 OFFSET $SG142689
  012b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  012bc	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 49   : CMD_REG(scanphxy, "<range x> <range y> [<count>]", "scan pulse heigth")

  012c1	68 00 00 00 00	 push	 OFFSET $SG142690
  012c6	68 00 00 00 00	 push	 OFFSET $SG142691
  012cb	68 00 00 00 00	 push	 OFFSET ?cmd_scanphxy@@YAXAAVCCmdLine@@@Z ; cmd_scanphxy
  012d0	68 00 00 00 00	 push	 OFFSET $SG142692
  012d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  012da	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 50   : CMD_REG(scanph, "<count>", "scan pulse heigth repeated")

  012df	68 00 00 00 00	 push	 OFFSET $SG142693
  012e4	68 00 00 00 00	 push	 OFFSET $SG142694
  012e9	68 00 00 00 00	 push	 OFFSET ?cmd_scanph@@YAXAAVCCmdLine@@@Z ; cmd_scanph
  012ee	68 00 00 00 00	 push	 OFFSET $SG142695
  012f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  012f8	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 51   : CMD_REG(dbmatch, "<count>", "DB analog cell uniformity")

  012fd	68 00 00 00 00	 push	 OFFSET $SG142696
  01302	68 00 00 00 00	 push	 OFFSET $SG142697
  01307	68 00 00 00 00	 push	 OFFSET ?cmd_dbmatch@@YAXAAVCCmdLine@@@Z ; cmd_dbmatch
  0130c	68 00 00 00 00	 push	 OFFSET $SG142698
  01311	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01316	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 52   : CMD_REG(dbmatch2, "<count>", "DB analog cell uniformity (2nd methode)")

  0131b	68 00 00 00 00	 push	 OFFSET $SG142699
  01320	68 00 00 00 00	 push	 OFFSET $SG142700
  01325	68 00 00 00 00	 push	 OFFSET ?cmd_dbmatch2@@YAXAAVCCmdLine@@@Z ; cmd_dbmatch2
  0132a	68 00 00 00 00	 push	 OFFSET $SG142701
  0132f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01334	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 53   : CMD_REG(evenodd, "<x> <y>", "pulse height even odd effect")

  01339	68 00 00 00 00	 push	 OFFSET $SG142702
  0133e	68 00 00 00 00	 push	 OFFSET $SG142703
  01343	68 00 00 00 00	 push	 OFFSET ?cmd_evenodd@@YAXAAVCCmdLine@@@Z ; cmd_evenodd
  01348	68 00 00 00 00	 push	 OFFSET $SG142704
  0134d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01352	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 54   : CMD_REG(multiread, "<n readouts>", "multiple readout")

  01357	68 00 00 00 00	 push	 OFFSET $SG142705
  0135c	68 00 00 00 00	 push	 OFFSET $SG142706
  01361	68 00 00 00 00	 push	 OFFSET ?cmd_multiread@@YAXAAVCCmdLine@@@Z ; cmd_multiread
  01366	68 00 00 00 00	 push	 OFFSET $SG142707
  0136b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01370	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 55   : CMD_REG(cluster, "<n readouts>", "cluster test")

  01375	68 00 00 00 00	 push	 OFFSET $SG142708
  0137a	68 00 00 00 00	 push	 OFFSET $SG142709
  0137f	68 00 00 00 00	 push	 OFFSET ?cmd_cluster@@YAXAAVCCmdLine@@@Z ; cmd_cluster
  01384	68 00 00 00 00	 push	 OFFSET $SG142710
  01389	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0138e	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 56   : CMD_REG(cluster2, "<n readouts>", "cluster test")

  01393	68 00 00 00 00	 push	 OFFSET $SG142711
  01398	68 00 00 00 00	 push	 OFFSET $SG142712
  0139d	68 00 00 00 00	 push	 OFFSET ?cmd_cluster2@@YAXAAVCCmdLine@@@Z ; cmd_cluster2
  013a2	68 00 00 00 00	 push	 OFFSET $SG142713
  013a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  013ac	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 57   : CMD_REG(db1, "", "Data buffer test")

  013b1	68 00 00 00 00	 push	 OFFSET $SG142714
  013b6	68 00 00 00 00	 push	 OFFSET $SG142715
  013bb	68 00 00 00 00	 push	 OFFSET ?cmd_db1@@YAXAAVCCmdLine@@@Z ; cmd_db1
  013c0	68 00 00 00 00	 push	 OFFSET $SG142716
  013c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  013ca	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 58   : CMD_REG(enapx, "{<x> <y>}", "enables n pixels and calibrate")

  013cf	68 00 00 00 00	 push	 OFFSET $SG142717
  013d4	68 00 00 00 00	 push	 OFFSET $SG142718
  013d9	68 00 00 00 00	 push	 OFFSET ?cmd_enapx@@YAXAAVCCmdLine@@@Z ; cmd_enapx
  013de	68 00 00 00 00	 push	 OFFSET $SG142719
  013e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  013e8	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 59   : 
; 60   : CMD_REG(rotest0, "", "DB test 0")

  013ed	68 00 00 00 00	 push	 OFFSET $SG142720
  013f2	68 00 00 00 00	 push	 OFFSET $SG142721
  013f7	68 00 00 00 00	 push	 OFFSET ?cmd_rotest0@@YAXAAVCCmdLine@@@Z ; cmd_rotest0
  013fc	68 00 00 00 00	 push	 OFFSET $SG142722
  01401	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01406	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 61   : CMD_REG(rotest1, "", "DB test 1")

  0140b	68 00 00 00 00	 push	 OFFSET $SG142723
  01410	68 00 00 00 00	 push	 OFFSET $SG142724
  01415	68 00 00 00 00	 push	 OFFSET ?cmd_rotest1@@YAXAAVCCmdLine@@@Z ; cmd_rotest1
  0141a	68 00 00 00 00	 push	 OFFSET $SG142725
  0141f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01424	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 62   : CMD_REG(rotest2, "", "DB test 2")

  01429	68 00 00 00 00	 push	 OFFSET $SG142726
  0142e	68 00 00 00 00	 push	 OFFSET $SG142727
  01433	68 00 00 00 00	 push	 OFFSET ?cmd_rotest2@@YAXAAVCCmdLine@@@Z ; cmd_rotest2
  01438	68 00 00 00 00	 push	 OFFSET $SG142728
  0143d	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01442	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 63   : CMD_REG(rotest3, "", "DB test 3")

  01447	68 00 00 00 00	 push	 OFFSET $SG142729
  0144c	68 00 00 00 00	 push	 OFFSET $SG142730
  01451	68 00 00 00 00	 push	 OFFSET ?cmd_rotest3@@YAXAAVCCmdLine@@@Z ; cmd_rotest3
  01456	68 00 00 00 00	 push	 OFFSET $SG142731
  0145b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  01460	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 64   : CMD_REG(idslope, "", "Id vs Pixel Rate")

  01465	68 00 00 00 00	 push	 OFFSET $SG142732
  0146a	68 00 00 00 00	 push	 OFFSET $SG142733
  0146f	68 00 00 00 00	 push	 OFFSET ?cmd_idslope@@YAXAAVCCmdLine@@@Z ; cmd_idslope
  01474	68 00 00 00 00	 push	 OFFSET $SG142734
  01479	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0147e	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand
; File C:\Users\Beat\git_projekte\dtb\psi46test\cmd.cpp

; 77   : 	CMD_REG(h, "", "simple help");

  01483	68 00 00 00 00	 push	 OFFSET $SG142735
  01488	68 00 00 00 00	 push	 OFFSET $SG142736
  0148d	68 00 00 00 00	 push	 OFFSET ?cmd_h@@YAXAAVCCmdLine@@@Z ; cmd_h
  01492	68 00 00 00 00	 push	 OFFSET $SG142737
  01497	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  0149c	e8 00 00 00 00	 call	 ?AddCommand@CInterpreter@@QAEXQBDP6AXAAVCCmdLine@@@Z00@Z ; CInterpreter::AddCommand

; 78   : 
; 79   : 	cmdHelp();

  014a1	e8 00 00 00 00	 call	 ?cmdHelp@@YAXXZ		; cmdHelp

; 80   : 
; 81   : 	cmd_intp.SetScriptPath(settings.scriptPath.c_str());

  014a6	b9 18 00 00 00	 mov	 ecx, OFFSET ?settings@@3VCSettings@@A+24
  014ab	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  014b0	50		 push	 eax
  014b1	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  014b6	e8 00 00 00 00	 call	 ?SetScriptPath@CInterpreter@@QAEXQBD@Z ; CInterpreter::SetScriptPath
$LN2@cmd:

; 82   : 
; 83   : 	// command loop
; 84   : 	while (true)

  014bb	b8 01 00 00 00	 mov	 eax, 1
  014c0	85 c0		 test	 eax, eax
  014c2	74 40		 je	 SHORT $LN1@cmd

; 85   : 	{
; 86   : 		try

  014c4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 87   : 		{
; 88   : 			CMD_RUN(stdin);

  014cb	6a 00		 push	 0
  014cd	6a 00		 push	 0
  014cf	e8 00 00 00 00	 call	 ___acrt_iob_func
  014d4	83 c4 04	 add	 esp, 4
  014d7	50		 push	 eax
  014d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?cmd_intp@@3VCInterpreter@@A ; cmd_intp
  014dd	e8 00 00 00 00	 call	 ?run@CInterpreter@@QAE_NPAU_iobuf@@H@Z ; CInterpreter::run

; 89   : 			return;

  014e2	eb 20		 jmp	 SHORT $LN1@cmd
__catch$?cmd@@YAXXZ$0:

; 90   : 		}
; 91   : 		catch (CRpcError e)
; 92   : 		{
; 93   : 			e.What();

  014e4	8d 4d e4	 lea	 ecx, DWORD PTR _e$2[ebp]
  014e7	e8 00 00 00 00	 call	 ?What@CRpcError@@QAEXXZ	; CRpcError::What

; 94   : 		}

  014ec	b8 00 00 00 00	 mov	 eax, $LN9@cmd
  014f1	c3		 ret	 0
  014f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  014f9	eb 07		 jmp	 SHORT __tryend$?cmd@@YAXXZ$1
$LN9@cmd:
  014fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?cmd@@YAXXZ$1:

; 95   : 	}

  01502	eb b7		 jmp	 SHORT $LN2@cmd
$LN1@cmd:

; 96   : }

  01504	52		 push	 edx
  01505	8b cd		 mov	 ecx, ebp
  01507	50		 push	 eax
  01508	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@cmd
  0150e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01513	58		 pop	 eax
  01514	5a		 pop	 edx
  01515	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  01518	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0151f	59		 pop	 ecx
  01520	5f		 pop	 edi
  01521	5e		 pop	 esi
  01522	5b		 pop	 ebx
  01523	83 c4 20	 add	 esp, 32			; 00000020H
  01526	3b ec		 cmp	 ebp, esp
  01528	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0152d	8b e5		 mov	 esp, ebp
  0152f	5d		 pop	 ebp
  01530	c3		 ret	 0
  01531	0f 1f 00	 npad	 3
$LN13@cmd:
  01534	01 00 00 00	 DD	 1
  01538	00 00 00 00	 DD	 $LN12@cmd
$LN12@cmd:
  0153c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  01540	08 00 00 00	 DD	 8
  01544	00 00 00 00	 DD	 $LN10@cmd
$LN10@cmd:
  01548	65		 DB	 101			; 00000065H
  01549	00		 DB	 0
  0154a	cc		 int	 3
  0154b	cc		 int	 3
  0154c	cc		 int	 3
  0154d	cc		 int	 3
  0154e	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?cmd@@YAXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?cmd@@YAXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?cmd@@YAXXZ ENDP					; cmd
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3931 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3932 :         return _Mypair._Myval2._Myptr();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3933 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2325 :     _CONSTEXPR20 bool _Large_string_engaged() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2326 : #if _HAS_CXX20
; 2327 :         if (_STD is_constant_evaluated()) {
; 2328 :             return true;
; 2329 :         }
; 2330 : #endif // _HAS_CXX20
; 2331 :         return _BUF_SIZE <= _Myres;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  00010	72 09		 jb	 SHORT $LN3@Large_stri
  00012	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  0001b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00022	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 2332 :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.30.30705\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2316 :     _CONSTEXPR20 const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2317 :         const value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2318 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2319 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2320 :         }
; 2321 : 
; 2322 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2323 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
END
